<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ProjNET</name>
    </assembly>
    <members>
        <member name="T:ProjNet.CoordinateSystems.AngularUnit">
            <summary>
            Definition of angular units.
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.AngularUnit.EqualityTolerance">
            <summary>
            Equality tolerance value. Values with a difference less than this are considered equal.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.AngularUnit.#ctor(System.Double)">
            <summary>
            Initializes a new instance of a angular unit
            </summary>
            <param name="radiansPerUnit">Radians per unit</param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.AngularUnit.#ctor(System.Double,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of a angular unit
            </summary>
            <param name="radiansPerUnit">Radians per unit</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="authorityCode">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="P:ProjNet.CoordinateSystems.AngularUnit.Degrees">
            <summary>
            The angular degrees are PI/180 = 0.017453292519943295769236907684886 radians
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.AngularUnit.Radian">
            <summary>
            SI standard unit
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.AngularUnit.Grad">
            <summary>
            Pi / 200 = 0.015707963267948966192313216916398 radians
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.AngularUnit.Gon">
            <summary>
            Pi / 200 = 0.015707963267948966192313216916398 radians
            </summary>		
        </member>
        <member name="P:ProjNet.CoordinateSystems.AngularUnit.RadiansPerUnit">
            <summary>
            Gets or sets the number of radians per <see cref="T:ProjNet.CoordinateSystems.AngularUnit"/>.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.AngularUnit.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.AngularUnit.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.AngularUnit.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.CoordinateSystem">
            <summary>
            Base interface for all coordinate systems.
            </summary>
            <remarks>
            <para>A coordinate system is a mathematical space, where the elements of the space
            are called positions. Each position is described by a list of numbers. The length 
            of the list corresponds to the dimension of the coordinate system. So in a 2D 
            coordinate system each position is described by a list containing 2 numbers.</para>
            <para>However, in a coordinate system, not all lists of numbers correspond to a 
            position - some lists may be outside the domain of the coordinate system. For 
            example, in a 2D Lat/Lon coordinate system, the list (91,91) does not correspond
            to a position.</para>
            <para>Some coordinate systems also have a mapping from the mathematical space into 
            locations in the real world. So in a Lat/Lon coordinate system, the mathematical 
            position (lat, long) corresponds to a location on the surface of the Earth. This 
            mapping from the mathematical space into real-world locations is called a Datum.</para>
            </remarks>
        </member>
        <member name="M:ProjNet.CoordinateSystems.CoordinateSystem.#ctor(System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of a coordinate system.
            </summary>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="authorityCode">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="P:ProjNet.CoordinateSystems.CoordinateSystem.Dimension">
            <summary>
            Dimension of the coordinate system.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.CoordinateSystem.GetUnits(System.Int32)">
            <summary>
            Gets the units for the dimension within coordinate system. 
            Each dimension in the coordinate system has corresponding units.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.CoordinateSystem.GetAxis(System.Int32)">
            <summary>
            Gets axis details for dimension within coordinate system.
            </summary>
            <param name="dimension">Dimension</param>
            <returns>Axis info</returns>
        </member>
        <member name="P:ProjNet.CoordinateSystems.CoordinateSystem.DefaultEnvelope">
            <summary>
            Gets default envelope of coordinate system.
            </summary>
            <remarks>
            Coordinate systems which are bounded should return the minimum bounding box of their domain. 
            Unbounded coordinate systems should return a box which is as large as is likely to be used. 
            For example, a (lon,lat) geographic coordinate system in degrees should return a box from 
            (-180,-90) to (180,90), and a geocentric coordinate system could return a box from (-r,-r,-r)
            to (+r,+r,+r) where r is the approximate radius of the Earth.
            </remarks>
        </member>
        <member name="T:ProjNet.CoordinateSystems.CoordinateSystemFactory">
            <summary>
            Builds up complex objects from simpler objects or values.
            </summary>
            <remarks>
            <para>ICoordinateSystemFactory allows applications to make coordinate systems that 
            cannot be created by a <see cref="T:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory"/>. This factory is very 
            flexible, whereas the authority factory is easier to use.</para>
            <para>So <see cref="T:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory"/>can be used to make 'standard' coordinate 
            systems, and <see cref="T:ProjNet.CoordinateSystems.CoordinateSystemFactory"/> can be used to make 'special' 
            coordinate systems.</para>
            <para>For example, the EPSG authority has codes for USA state plane coordinate systems 
            using the NAD83 datum, but these coordinate systems always use meters. EPSG does not 
            have codes for NAD83 state plane coordinate systems that use feet units. This factory
            lets an application create such a hybrid coordinate system.</para>
            </remarks>
        </member>
        <member name="M:ProjNet.CoordinateSystems.CoordinateSystemFactory.CreateFromXml(System.String)">
            <summary>
            Creates a coordinate system object from an XML string.
            </summary>
            <param name="xml">XML representation for the spatial reference</param>
            <returns>The resulting spatial reference object</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.CoordinateSystemFactory.CreateFromWkt(System.String)">
            <summary>
            Creates a spatial reference object given its Well-known text representation.
            The output object may be either a <see cref="T:GeoAPI.CoordinateSystems.IGeographicCoordinateSystem"/> or
            a <see cref="T:GeoAPI.CoordinateSystems.IProjectedCoordinateSystem"/>.
            </summary>
            <param name="WKT">The Well-known text representation for the spatial reference</param>
            <returns>The resulting spatial reference object</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.CoordinateSystemFactory.CreateCompoundCoordinateSystem(System.String,GeoAPI.CoordinateSystems.ICoordinateSystem,GeoAPI.CoordinateSystems.ICoordinateSystem)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.ICompoundCoordinateSystem"/> [NOT IMPLEMENTED].
            </summary>
            <param name="name">Name of compound coordinate system.</param>
            <param name="head">Head coordinate system</param>
            <param name="tail">Tail coordinate system</param>
            <returns>Compound coordinate system</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.CoordinateSystemFactory.CreateFittedCoordinateSystem(System.String,GeoAPI.CoordinateSystems.ICoordinateSystem,System.String,System.Collections.Generic.List{GeoAPI.CoordinateSystems.AxisInfo})">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IFittedCoordinateSystem"/>.
            </summary>
            <remarks>The units of the axes in the fitted coordinate system will be 
            inferred from the units of the base coordinate system. If the affine map
            performs a rotation, then any mixed axes must have identical units. For
            example, a (lat_deg,lon_deg,height_feet) system can be rotated in the 
            (lat,lon) plane, since both affected axes are in degrees. But you 
            should not rotate this coordinate system in any other plane.</remarks>
            <param name="name">Name of coordinate system</param>
            <param name="baseCoordinateSystem">Base coordinate system</param>
            <param name="toBaseWkt"></param>
            <param name="arAxes"></param>
            <returns>Fitted coordinate system</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.CoordinateSystemFactory.CreateLocalCoordinateSystem(System.String,GeoAPI.CoordinateSystems.ILocalDatum,GeoAPI.CoordinateSystems.IUnit,System.Collections.Generic.List{GeoAPI.CoordinateSystems.AxisInfo})">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.ILocalCoordinateSystem">local coordinate system</see>.
            </summary>
            <remarks>
             The dimension of the local coordinate system is determined by the size of 
            the axis array. All the axes will have the same units. If you want to make 
            a coordinate system with mixed units, then you can make a compound 
            coordinate system from different local coordinate systems.
            </remarks>
            <param name="name">Name of local coordinate system</param>
            <param name="datum">Local datum</param>
            <param name="unit">Units</param>
            <param name="axes">Axis info</param>
            <returns>Local coordinate system</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.CoordinateSystemFactory.CreateEllipsoid(System.String,System.Double,System.Double,GeoAPI.CoordinateSystems.ILinearUnit)">
            <summary>
            Creates an <see cref="T:ProjNet.CoordinateSystems.Ellipsoid"/> from radius values.
            </summary>
            <seealso cref="M:ProjNet.CoordinateSystems.CoordinateSystemFactory.CreateFlattenedSphere(System.String,System.Double,System.Double,GeoAPI.CoordinateSystems.ILinearUnit)"/>
            <param name="name">Name of ellipsoid</param>
            <param name="semiMajorAxis"></param>
            <param name="semiMinorAxis"></param>
            <param name="linearUnit"></param>
            <returns>Ellipsoid</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.CoordinateSystemFactory.CreateFlattenedSphere(System.String,System.Double,System.Double,GeoAPI.CoordinateSystems.ILinearUnit)">
            <summary>
            Creates an <see cref="T:ProjNet.CoordinateSystems.Ellipsoid"/> from an major radius, and inverse flattening.
            </summary>
            <seealso cref="M:ProjNet.CoordinateSystems.CoordinateSystemFactory.CreateEllipsoid(System.String,System.Double,System.Double,GeoAPI.CoordinateSystems.ILinearUnit)"/>
            <param name="name">Name of ellipsoid</param>
            <param name="semiMajorAxis">Semi major-axis</param>
            <param name="inverseFlattening">Inverse flattening</param>
            <param name="linearUnit">Linear unit</param>
            <returns>Ellipsoid</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.CoordinateSystemFactory.CreateProjectedCoordinateSystem(System.String,GeoAPI.CoordinateSystems.IGeographicCoordinateSystem,GeoAPI.CoordinateSystems.IProjection,GeoAPI.CoordinateSystems.ILinearUnit,GeoAPI.CoordinateSystems.AxisInfo,GeoAPI.CoordinateSystems.AxisInfo)">
            <summary>
            Creates a <see cref="T:ProjNet.CoordinateSystems.ProjectedCoordinateSystem"/> using a projection object.
            </summary>
            <param name="name">Name of projected coordinate system</param>
            <param name="gcs">Geographic coordinate system</param>
            <param name="projection">Projection</param>
            <param name="linearUnit">Linear unit</param>
            <param name="axis0">Primary axis</param>
            <param name="axis1">Secondary axis</param>
            <returns>Projected coordinate system</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.CoordinateSystemFactory.CreateProjection(System.String,System.String,System.Collections.Generic.List{GeoAPI.CoordinateSystems.ProjectionParameter})">
            <summary>
            Creates a <see cref="T:ProjNet.CoordinateSystems.Projection"/>.
            </summary>
            <param name="name">Name of projection</param>
            <param name="wktProjectionClass">Projection class</param>
            <param name="parameters">Projection parameters</param>
            <returns>Projection</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.CoordinateSystemFactory.CreateHorizontalDatum(System.String,GeoAPI.CoordinateSystems.DatumType,GeoAPI.CoordinateSystems.IEllipsoid,GeoAPI.CoordinateSystems.Wgs84ConversionInfo)">
            <summary>
            Creates <see cref="T:ProjNet.CoordinateSystems.HorizontalDatum"/> from ellipsoid and Bursa-World parameters.
            </summary>
            <remarks>
            Since this method contains a set of Bursa-Wolf parameters, the created 
            datum will always have a relationship to WGS84. If you wish to create a
            horizontal datum that has no relationship with WGS84, then you can 
            either specify a <see cref="T:GeoAPI.CoordinateSystems.DatumType">horizontalDatumType</see> of <see cref="F:GeoAPI.CoordinateSystems.DatumType.HD_Other"/>, or create it via WKT.
            </remarks>
            <param name="name">Name of ellipsoid</param>
            <param name="datumType">Type of datum</param>
            <param name="ellipsoid">Ellipsoid</param>
            <param name="toWgs84">Wgs84 conversion parameters</param>
            <returns>Horizontal datum</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.CoordinateSystemFactory.CreatePrimeMeridian(System.String,GeoAPI.CoordinateSystems.IAngularUnit,System.Double)">
            <summary>
            Creates a <see cref="T:ProjNet.CoordinateSystems.PrimeMeridian"/>, relative to Greenwich.
            </summary>
            <param name="name">Name of prime meridian</param>
            <param name="angularUnit">Angular unit</param>
            <param name="longitude">Longitude</param>
            <returns>Prime meridian</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.CoordinateSystemFactory.CreateGeographicCoordinateSystem(System.String,GeoAPI.CoordinateSystems.IAngularUnit,GeoAPI.CoordinateSystems.IHorizontalDatum,GeoAPI.CoordinateSystems.IPrimeMeridian,GeoAPI.CoordinateSystems.AxisInfo,GeoAPI.CoordinateSystems.AxisInfo)">
            <summary>
            Creates a <see cref="T:ProjNet.CoordinateSystems.GeographicCoordinateSystem"/>, which could be Lat/Lon or Lon/Lat.
            </summary>
            <param name="name">Name of geographical coordinate system</param>
            <param name="angularUnit">Angular units</param>
            <param name="datum">Horizontal datum</param>
            <param name="primeMeridian">Prime meridian</param>
            <param name="axis0">First axis</param>
            <param name="axis1">Second axis</param>
            <returns>Geographic coordinate system</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.CoordinateSystemFactory.CreateLocalDatum(System.String,GeoAPI.CoordinateSystems.DatumType)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.ILocalDatum"/>.
            </summary>
            <param name="name">Name of datum</param>
            <param name="datumType">Datum type</param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.CoordinateSystemFactory.CreateVerticalDatum(System.String,GeoAPI.CoordinateSystems.DatumType)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IVerticalDatum"/> from an enumerated type value.
            </summary>
            <param name="name">Name of datum</param>
            <param name="datumType">Type of datum</param>
            <returns>Vertical datum</returns>	
        </member>
        <member name="M:ProjNet.CoordinateSystems.CoordinateSystemFactory.CreateVerticalCoordinateSystem(System.String,GeoAPI.CoordinateSystems.IVerticalDatum,GeoAPI.CoordinateSystems.ILinearUnit,GeoAPI.CoordinateSystems.AxisInfo)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IVerticalCoordinateSystem"/> from a <see cref="T:GeoAPI.CoordinateSystems.IVerticalDatum">datum</see> and <see cref="T:ProjNet.CoordinateSystems.LinearUnit">linear units</see>.
            </summary>
            <param name="name">Name of vertical coordinate system</param>
            <param name="datum">Vertical datum</param>
            <param name="verticalUnit">Unit</param>
            <param name="axis">Axis info</param>
            <returns>Vertical coordinate system</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.CoordinateSystemFactory.CreateGeocentricCoordinateSystem(System.String,GeoAPI.CoordinateSystems.IHorizontalDatum,GeoAPI.CoordinateSystems.ILinearUnit,GeoAPI.CoordinateSystems.IPrimeMeridian)">
            <summary>
            Creates a <see cref="M:ProjNet.CoordinateSystems.CoordinateSystemFactory.CreateGeocentricCoordinateSystem(System.String,GeoAPI.CoordinateSystems.IHorizontalDatum,GeoAPI.CoordinateSystems.ILinearUnit,GeoAPI.CoordinateSystems.IPrimeMeridian)"/> from a <see cref="T:GeoAPI.CoordinateSystems.IHorizontalDatum">datum</see>, 
            <see cref="T:GeoAPI.CoordinateSystems.ILinearUnit">linear unit</see> and <see cref="T:GeoAPI.CoordinateSystems.IPrimeMeridian"/>.
            </summary>
            <param name="name">Name of geocentric coordinate system</param>
            <param name="datum">Horizontal datum</param>
            <param name="linearUnit">Linear unit</param>
            <param name="primeMeridian">Prime meridian</param>
            <returns>Geocentric Coordinate System</returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Datum">
            <summary>
            A set of quantities from which other quantities are calculated.
            </summary>
            <remarks>
            For the OGC abstract model, it can be defined as a set of real points on the earth 
            that have coordinates. EG. A datum can be thought of as a set of parameters 
            defining completely the origin and orientation of a coordinate system with respect 
            to the earth. A textual description and/or a set of parameters describing the 
            relationship of a coordinate system to some predefined physical locations (such 
            as center of mass) and physical directions (such as axis of spin). The definition 
            of the datum may also include the temporal behavior (such as the rate of change of
            the orientation of the coordinate axes).
            </remarks>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Datum.#ctor(GeoAPI.CoordinateSystems.DatumType,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of a Datum object
            </summary>
            <param name="type">Datum type</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="code">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Datum.DatumType">
            <summary>
            Gets or sets the type of the datum as an enumerated code.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Datum.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Ellipsoid">
            <summary>
            The IEllipsoid interface defines the standard information stored with ellipsoid objects.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Ellipsoid.#ctor(System.Double,System.Double,System.Double,System.Boolean,GeoAPI.CoordinateSystems.ILinearUnit,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of an Ellipsoid
            </summary>
            <param name="semiMajorAxis">Semi major axis</param>
            <param name="semiMinorAxis">Semi minor axis</param>
            <param name="inverseFlattening">Inverse flattening</param>
            <param name="isIvfDefinitive">Inverse Flattening is definitive for this ellipsoid (Semi-minor axis will be overridden)</param>
            <param name="axisUnit">Axis unit</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="code">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Ellipsoid.WGS84">
            <summary>
            WGS 84 ellipsoid
            </summary>
            <remarks>
            Inverse flattening derived from four defining parameters 
            (semi-major axis;
            C20 = -484.16685*10e-6;
            earth's angular velocity w = 7292115e11 rad/sec;
            gravitational constant GM = 3986005e8 m*m*m/s/s).
            </remarks>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Ellipsoid.WGS72">
            <summary>
            WGS 72 Ellipsoid
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Ellipsoid.GRS80">
            <summary>
            GRS 1980 / International 1979 ellipsoid
            </summary>
            <remarks>
            Adopted by IUGG 1979 Canberra.
            Inverse flattening is derived from
            geocentric gravitational constant GM = 3986005e8 m*m*m/s/s;
            dynamic form factor J2 = 108263e8 and Earth's angular velocity = 7292115e-11 rad/s.")
            </remarks>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Ellipsoid.International1924">
            <summary>
            International 1924 / Hayford 1909 ellipsoid
            </summary>
            <remarks>
            Described as a=6378388 m. and b=6356909m. from which 1/f derived to be 296.95926. 
            The figure was adopted as the International ellipsoid in 1924 but with 1/f taken as
            297 exactly from which b is derived as 6356911.946m.
            </remarks>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Ellipsoid.Clarke1880">
            <summary>
            Clarke 1880
            </summary>
            <remarks>
            Clarke gave a and b and also 1/f=293.465 (to 3 decimal places).  1/f derived from a and b = 293.4663077
            </remarks>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Ellipsoid.Clarke1866">
            <summary>
            Clarke 1866
            </summary>
            <remarks>
            Original definition a=20926062 and b=20855121 (British) feet. Uses Clarke's 1865 inch-metre ratio of 39.370432 to obtain metres. (Metric value then converted to US survey feet for use in the United States using 39.37 exactly giving a=20925832.16 ft US).
            </remarks>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Ellipsoid.Sphere">
            <summary>
            Sphere
            </summary>
            <remarks>
            Authalic sphere derived from GRS 1980 ellipsoid (code 7019).  (An authalic sphere is
            one with a surface area equal to the surface area of the ellipsoid). 1/f is infinite.
            </remarks>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Ellipsoid.SemiMajorAxis">
            <summary>
            Gets or sets the value of the semi-major axis.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Ellipsoid.SemiMinorAxis">
            <summary>
            Gets or sets the value of the semi-minor axis.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Ellipsoid.InverseFlattening">
            <summary>
            Gets or sets the value of the inverse of the flattening constant of the ellipsoid.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Ellipsoid.AxisUnit">
            <summary>
            Gets or sets the value of the axis unit.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Ellipsoid.IsIvfDefinitive">
            <summary>
            Tells if the Inverse Flattening is definitive for this ellipsoid. Some ellipsoids use 
            the IVF as the defining value, and calculate the polar radius whenever asked. Other
            ellipsoids use the polar radius to calculate the IVF whenever asked. This 
            distinction can be important to avoid floating-point rounding errors.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Ellipsoid.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Ellipsoid.XML">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Ellipsoid.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.FittedCoordinateSystem">
            <summary>
            A coordinate system which sits inside another coordinate system. The fitted 
            coordinate system can be rotated and shifted, or use any other math transform
            to inject itself into the base coordinate system.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.FittedCoordinateSystem.#ctor(GeoAPI.CoordinateSystems.ICoordinateSystem,GeoAPI.CoordinateSystems.Transformations.IMathTransform,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Creates an instance of FittedCoordinateSystem using the specified parameters
            </summary>
            <param name="baseSystem">Underlying coordinate system.</param>
            <param name="transform">Transformation from fitted coordinate system to the base one</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="code">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="P:ProjNet.CoordinateSystems.FittedCoordinateSystem.ToBaseTransform">
            <summary>
            Represents math transform that injects itself into the base coordinate system.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.FittedCoordinateSystem.BaseCoordinateSystem">
            <summary>
            Gets underlying coordinate system.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.FittedCoordinateSystem.ToBase">
            <summary>
            Gets Well-Known Text of a math transform to the base coordinate system. 
            The dimension of this fitted coordinate system is determined by the source 
            dimension of the math transform. The transform should be one-to-one within 
            this coordinate system's domain, and the base coordinate system dimension 
            must be at least as big as the dimension of this coordinate system.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ProjNet.CoordinateSystems.FittedCoordinateSystem.WKT">
            <summary>
            Returns the Well-known text for this object as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.FittedCoordinateSystem.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.FittedCoordinateSystem.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.FittedCoordinateSystem.GetUnits(System.Int32)">
            <summary>
            Gets the units for the dimension within coordinate system. 
            Each dimension in the coordinate system has corresponding units.
            </summary>
        </member>
        <member name="T:ProjNet.CoordinateSystems.GeocentricCoordinateSystem">
            <summary>
            A 3D coordinate system, with its origin at the center of the Earth.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.GeocentricCoordinateSystem.WGS84">
            <summary>
            Creates a geocentric coordinate system based on the WGS84 ellipsoid, suitable for GPS measurements
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.GeocentricCoordinateSystem.HorizontalDatum">
            <summary>
            Returns the HorizontalDatum. The horizontal datum is used to determine where
            the centre of the Earth is considered to be. All coordinate points will be 
            measured from the centre of the Earth, and not the surface.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.GeocentricCoordinateSystem.LinearUnit">
            <summary>
            Gets the units used along all the axes.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.GeocentricCoordinateSystem.GetUnits(System.Int32)">
            <summary>
            Gets units for dimension within coordinate system. Each dimension in 
            the coordinate system has corresponding units.
            </summary>
            <param name="dimension">Dimension</param>
            <returns>Unit</returns>
        </member>
        <member name="P:ProjNet.CoordinateSystems.GeocentricCoordinateSystem.PrimeMeridian">
            <summary>
            Returns the PrimeMeridian.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.GeocentricCoordinateSystem.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.GeocentricCoordinateSystem.XML">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.GeocentricCoordinateSystem.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.GeographicCoordinateSystem">
            <summary>
            A coordinate system based on latitude and longitude. 
            </summary>
            <remarks>
            Some geographic coordinate systems are Lat/Lon, and some are Lon/Lat. 
            You can find out which this is by examining the axes. You should also 
            check the angular units, since not all geographic coordinate systems 
            use degrees.
            </remarks>
        </member>
        <member name="M:ProjNet.CoordinateSystems.GeographicCoordinateSystem.#ctor(GeoAPI.CoordinateSystems.IAngularUnit,GeoAPI.CoordinateSystems.IHorizontalDatum,GeoAPI.CoordinateSystems.IPrimeMeridian,System.Collections.Generic.List{GeoAPI.CoordinateSystems.AxisInfo},System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Creates an instance of a Geographic Coordinate System
            </summary>
            <param name="angularUnit">Angular units</param>
            <param name="horizontalDatum">Horizontal datum</param>
            <param name="primeMeridian">Prime meridian</param>
            <param name="axisInfo">Axis info</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="authorityCode">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="P:ProjNet.CoordinateSystems.GeographicCoordinateSystem.WGS84">
            <summary>
            Creates a decimal degrees geographic coordinate system based on the WGS84 ellipsoid, suitable for GPS measurements
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.GeographicCoordinateSystem.AngularUnit">
            <summary>
            Gets or sets the angular units of the geographic coordinate system.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.GeographicCoordinateSystem.GetUnits(System.Int32)">
            <summary>
            Gets units for dimension within coordinate system. Each dimension in 
            the coordinate system has corresponding units.
            </summary>
            <param name="dimension">Dimension</param>
            <returns>Unit</returns>
        </member>
        <member name="P:ProjNet.CoordinateSystems.GeographicCoordinateSystem.PrimeMeridian">
            <summary>
            Gets or sets the prime meridian of the geographic coordinate system.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.GeographicCoordinateSystem.NumConversionToWGS84">
            <summary>
            Gets the number of available conversions to WGS84 coordinates.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.GeographicCoordinateSystem.GetWgs84ConversionInfo(System.Int32)">
            <summary>
            Gets details on a conversion to WGS84.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.GeographicCoordinateSystem.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.GeographicCoordinateSystem.XML">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.GeographicCoordinateSystem.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.GeographicTransform">
            <summary>
            The GeographicTransform class is implemented on geographic transformation objects and
            implements datum transformations between geographic coordinate systems.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.GeographicTransform.SourceGCS">
            <summary>
            Gets or sets the source geographic coordinate system for the transformation.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.GeographicTransform.TargetGCS">
            <summary>
            Gets or sets the target geographic coordinate system for the transformation.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.GeographicTransform.ParameterInfo">
            <summary>
            Returns an accessor interface to the parameters for this geographic transformation.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.GeographicTransform.Forward(System.Collections.Generic.List{System.Double[]})">
            <summary>
            Transforms an array of points from the source geographic coordinate
            system to the target geographic coordinate system.
            </summary>
            <param name="points">On input points in the source geographic coordinate system</param>
            <returns>Output points in the target geographic coordinate system</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.GeographicTransform.Inverse(System.Collections.Generic.List{System.Double[]})">
            <summary>
            Transforms an array of points from the target geographic coordinate
            system to the source geographic coordinate system.
            </summary>
            <param name="points">Input points in the target geographic coordinate system,</param>
            <returns>Output points in the source geographic coordinate system</returns>
        </member>
        <member name="P:ProjNet.CoordinateSystems.GeographicTransform.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.GeographicTransform.XML">
            <summary>
            Gets an XML representation of this object [NOT IMPLEMENTED].
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.GeographicTransform.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.HorizontalCoordinateSystem">
            <summary>
            A 2D coordinate system suitable for positions on the Earth's surface.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.HorizontalCoordinateSystem.#ctor(GeoAPI.CoordinateSystems.IHorizontalDatum,System.Collections.Generic.List{GeoAPI.CoordinateSystems.AxisInfo},System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Creates an instance of HorizontalCoordinateSystem
            </summary>
            <param name="datum">Horizontal datum</param>
            <param name="axisInfo">Axis information</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="code">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="P:ProjNet.CoordinateSystems.HorizontalCoordinateSystem.HorizontalDatum">
            <summary>
            Gets or sets the HorizontalDatum.
            </summary>
        </member>
        <member name="T:ProjNet.CoordinateSystems.HorizontalDatum">
            <summary>
            Horizontal datum defining the standard datum information.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.HorizontalDatum.#ctor(GeoAPI.CoordinateSystems.IEllipsoid,GeoAPI.CoordinateSystems.Wgs84ConversionInfo,GeoAPI.CoordinateSystems.DatumType,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of a horizontal datum
            </summary>
            <param name="ellipsoid">Ellipsoid</param>
            <param name="toWgs84">Parameters for a Bursa Wolf transformation into WGS84</param>
            <param name="type">Datum type</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="code">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="P:ProjNet.CoordinateSystems.HorizontalDatum.WGS84">
            <summary>
            EPSG's WGS 84 datum has been the then current realisation. No distinction is made between the original WGS 84 
            frame, WGS 84 (G730), WGS 84 (G873) and WGS 84 (G1150). Since 1997, WGS 84 has been maintained within 10cm of 
            the then current ITRF.
            </summary>
            <remarks>
            <para>Area of use: World</para>
            <para>Origin description: Defined through a consistent set of station coordinates. These have changed with time: by 0.7m 
            on 29/6/1994 [WGS 84 (G730)], a further 0.2m on 29/1/1997 [WGS 84 (G873)] and a further 0.06m on 
            20/1/2002 [WGS 84 (G1150)].</para>
            </remarks>
        </member>
        <member name="P:ProjNet.CoordinateSystems.HorizontalDatum.WGS72">
            <summary>
            World Geodetic System 1972
            </summary>
            <remarks>
            <para>Used by GPS before 1987. For Transit satellite positioning see also WGS 72BE. Datum code 6323 reserved for southern hemisphere ProjCS's.</para>
            <para>Area of use: World</para>
            <para>Origin description: Developed from a worldwide distribution of terrestrial and
            geodetic satellite observations and defined through a set of station coordinates.</para>
            </remarks>
        </member>
        <member name="P:ProjNet.CoordinateSystems.HorizontalDatum.ETRF89">
            <summary>
            European Terrestrial Reference System 1989
            </summary>
            <remarks>
            <para>Area of use: 
            Europe: Albania; Andorra; Austria; Belgium; Bosnia and Herzegovina; Bulgaria; Croatia; 
            Cyprus; Czech Republic; Denmark; Estonia; Finland; Faroe Islands; France; Germany; Greece; 
            Hungary; Ireland; Italy; Latvia; Liechtenstein; Lithuania; Luxembourg; Malta; Netherlands; 
            Norway; Poland; Portugal; Romania; San Marino; Serbia and Montenegro; Slovakia; Slovenia; 
            Spain; Svalbard; Sweden; Switzerland; United Kingdom (UK) including Channel Islands and 
            Isle of Man; Vatican City State.</para>
            <para>Origin description: Fixed to the stable part of the Eurasian continental 
            plate and consistent with ITRS at the epoch 1989.0.</para>
            </remarks>
        </member>
        <member name="P:ProjNet.CoordinateSystems.HorizontalDatum.ED50">
            <summary>
            European Datum 1950
            </summary>
            <remarks>
            <para>Area of use:
            Europe - west - Denmark; Faroe Islands; France offshore; Israel offshore; Italy including San 
            Marino and Vatican City State; Ireland offshore; Netherlands offshore; Germany; Greece (offshore);
            North Sea; Norway; Spain; Svalbard; Turkey; United Kingdom UKCS offshore. Egypt - Western Desert.
            </para>
            <para>Origin description: Fundamental point: Potsdam (Helmert Tower). 
            Latitude: 52 deg 22 min 51.4456 sec N; Longitude: 13 deg  3 min 58.9283 sec E (of Greenwich).</para>
            </remarks>
        </member>
        <member name="P:ProjNet.CoordinateSystems.HorizontalDatum.Ellipsoid">
            <summary>
            Gets or sets the ellipsoid of the datum
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.HorizontalDatum.Wgs84Parameters">
            <summary>
            Gets preferred parameters for a Bursa Wolf transformation into WGS84
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.HorizontalDatum.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.HorizontalDatum.XML">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.HorizontalDatum.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Info">
            <summary>
            The Info object defines the standard information
            stored with spatial reference objects
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Info.#ctor(System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            A base interface for metadata applicable to coordinate system objects.
            </summary>
            <remarks>
            <para>The metadata items ‘Abbreviation’, ‘Alias’, ‘Authority’, ‘AuthorityCode’, ‘Name’ and ‘Remarks’ 
            were specified in the Simple Features interfaces, so they have been kept here.</para>
            <para>This specification does not dictate what the contents of these items 
            should be. However, the following guidelines are suggested:</para>
            <para>When <see cref="T:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory"/> is used to create an object, the ‘Authority’
            and 'AuthorityCode' values should be set to the authority name of the factory object, and the authority 
            code supplied by the client, respectively. The other values may or may not be set. (If the authority is 
            EPSG, the implementer may consider using the corresponding metadata values in the EPSG tables.)</para>
            <para>When <see cref="T:ProjNet.CoordinateSystems.CoordinateSystemFactory"/> creates an object, the 'Name' should be set to the value
            supplied by the client. All of the other metadata items should be left empty</para>
            </remarks>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="code">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Info.Name">
            <summary>
            Gets or sets the name of the object.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Info.Authority">
            <summary>
            Gets or sets the authority name for this object, e.g., "EPSG",
            is this is a standard object with an authority specific
            identity code. Returns "CUSTOM" if this is a custom object.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Info.AuthorityCode">
            <summary>
            Gets or sets the authority specific identification code of the object
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Info.Alias">
            <summary>
            Gets or sets the alias of the object.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Info.Abbreviation">
            <summary>
            Gets or sets the abbreviation of the object.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Info.Remarks">
            <summary>
            Gets or sets the provider-supplied remarks for the object.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Info.ToString">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Info.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Info.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Info.InfoXml">
            <summary>
            Returns an XML string of the info object
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Info.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.LinearUnit">
            <summary>
            Definition of linear units.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.LinearUnit.#ctor(System.Double,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Creates an instance of a linear unit
            </summary>
            <param name="metersPerUnit">Number of meters per <see cref="T:ProjNet.CoordinateSystems.LinearUnit" /></param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="authorityCode">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="P:ProjNet.CoordinateSystems.LinearUnit.Metre">
            <summary>
            Returns the meters linear unit.
            Also known as International metre. SI standard unit.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.LinearUnit.Foot">
            <summary>
            Returns the foot linear unit (1ft = 0.3048m).
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.LinearUnit.USSurveyFoot">
            <summary>
            Returns the US Survey foot linear unit (1ftUS = 0.304800609601219m).
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.LinearUnit.NauticalMile">
            <summary>
            Returns the Nautical Mile linear unit (1NM = 1852m).
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.LinearUnit.ClarkesFoot">
            <summary>
            Returns Clarke's foot.
            </summary>
            <remarks>
            Assumes Clarke's 1865 ratio of 1 British foot = 0.3047972654 French legal metres applies to the international metre. 
            Used in older Australian, southern African &amp; British West Indian mapping.
            </remarks>
        </member>
        <member name="P:ProjNet.CoordinateSystems.LinearUnit.MetersPerUnit">
            <summary>
            Gets or sets the number of meters per <see cref="T:ProjNet.CoordinateSystems.LinearUnit"/>.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.LinearUnit.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.LinearUnit.XML">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.LinearUnit.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.ParameterInfo">
            <summary>
            Simple class that implements the IParameterInfo interface for providing general set of the parameters.
            It allows discovering the names, and for setting and getting parameter values.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.ParameterInfo.NumParameters">
            <summary>
            Gets the number of parameters expected.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.ParameterInfo.Parameters">
            <summary>
            Gets or sets the parameters set for this projection.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.ParameterInfo.DefaultParameters">
            <summary>
            Returns the default parameters for this projection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.ParameterInfo.GetParameterByName(System.String)">
            <summary>
            Gets the parameter by its name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.PrimeMeridian">
            <summary>
            A meridian used to take longitude measurements from.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.PrimeMeridian.#ctor(System.Double,GeoAPI.CoordinateSystems.IAngularUnit,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of a prime meridian
            </summary>
            <param name="longitude">Longitude of prime meridian</param>
            <param name="angularUnit">Angular unit</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="authorityCode">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="P:ProjNet.CoordinateSystems.PrimeMeridian.Greenwich">
            <summary>
            Greenwich prime meridian
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.PrimeMeridian.Lisbon">
            <summary>
            Lisbon prime meridian
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.PrimeMeridian.Paris">
            <summary>
            Paris prime meridian.
            Value adopted by IGN (Paris) in 1936. Equivalent to 2 deg 20min 14.025sec. Preferred by EPSG to earlier value of 2deg 20min 13.95sec (2.596898 grads) used by RGS London.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.PrimeMeridian.Bogota">
            <summary>
            Bogota prime meridian
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.PrimeMeridian.Madrid">
            <summary>
            Madrid prime meridian
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.PrimeMeridian.Rome">
            <summary>
            Rome prime meridian
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.PrimeMeridian.Bern">
            <summary>
            Bern prime meridian.
            1895 value. Newer value of 7 deg 26 min 22.335 sec E determined in 1938.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.PrimeMeridian.Jakarta">
            <summary>
            Jakarta prime meridian
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.PrimeMeridian.Ferro">
            <summary>
            Ferro prime meridian.
            Used in Austria and former Czechoslovakia.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.PrimeMeridian.Brussels">
            <summary>
            Brussels prime meridian
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.PrimeMeridian.Stockholm">
            <summary>
            Stockholm prime meridian
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.PrimeMeridian.Athens">
            <summary>
            Athens prime meridian.
            Used in Greece for older mapping based on Hatt projection.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.PrimeMeridian.Oslo">
            <summary>
            Oslo prime meridian.
            Formerly known as Kristiania or Christiania.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.PrimeMeridian.Longitude">
            <summary>
            Gets or sets the longitude of the prime meridian (relative to the Greenwich prime meridian).
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.PrimeMeridian.AngularUnit">
            <summary>
            Gets or sets the AngularUnits.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.PrimeMeridian.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.PrimeMeridian.XML">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.PrimeMeridian.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.ProjectedCoordinateSystem">
            <summary>
            A 2D cartographic coordinate system.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.ProjectedCoordinateSystem.#ctor(GeoAPI.CoordinateSystems.IHorizontalDatum,GeoAPI.CoordinateSystems.IGeographicCoordinateSystem,GeoAPI.CoordinateSystems.ILinearUnit,GeoAPI.CoordinateSystems.IProjection,System.Collections.Generic.List{GeoAPI.CoordinateSystems.AxisInfo},System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of a projected coordinate system
            </summary>
            <param name="datum">Horizontal datum</param>
            <param name="geographicCoordinateSystem">Geographic coordinate system</param>
            <param name="linearUnit">Linear unit</param>
            <param name="projection">Projection</param>
            <param name="axisInfo">Axis info</param>
            <param name="name">Name</param>
            <param name="authority">Authority name</param>
            <param name="code">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.ProjectedCoordinateSystem.WGS84_UTM(System.Int32,System.Boolean)">
            <summary>
            Universal Transverse Mercator - WGS84
            </summary>
            <param name="zone">UTM zone</param>
            <param name="zoneIsNorth">true of Northern hemisphere, false if southern</param>
            <returns>UTM/WGS84 coordsys</returns>
        </member>
        <member name="P:ProjNet.CoordinateSystems.ProjectedCoordinateSystem.WebMercator">
            <summary>
            Gets a WebMercator coordinate reference system
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.ProjectedCoordinateSystem.GeographicCoordinateSystem">
            <summary>
            Gets or sets the GeographicCoordinateSystem.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.ProjectedCoordinateSystem.LinearUnit">
            <summary>
            Gets or sets the <see cref="P:ProjNet.CoordinateSystems.ProjectedCoordinateSystem.LinearUnit">LinearUnits</see>. The linear unit must be the same as the <see cref="T:ProjNet.CoordinateSystems.CoordinateSystem"/> units.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.ProjectedCoordinateSystem.GetUnits(System.Int32)">
            <summary>
            Gets units for dimension within coordinate system. Each dimension in 
            the coordinate system has corresponding units.
            </summary>
            <param name="dimension">Dimension</param>
            <returns>Unit</returns>
        </member>
        <member name="P:ProjNet.CoordinateSystems.ProjectedCoordinateSystem.Projection">
            <summary>
            Gets or sets the projection
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.ProjectedCoordinateSystem.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.ProjectedCoordinateSystem.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.ProjectedCoordinateSystem.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Projection">
            <summary>
            The Projection class defines the standard information stored with a projection
            objects. A projection object implements a coordinate transformation from a geographic
            coordinate system to a projected coordinate system, given the ellipsoid for the
            geographic coordinate system. It is expected that each coordinate transformation of
            interest, e.g., Transverse Mercator, Lambert, will be implemented as a class of
            type Projection, supporting the IProjection interface.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Projection.NumParameters">
            <summary>
            Gets the number of parameters of the projection.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Projection.Parameters">
            <summary>
            Gets or sets the parameters of the projection
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projection.GetParameter(System.Int32)">
            <summary>
            Gets an indexed parameter of the projection.
            </summary>
            <param name="index">Index of parameter</param>
            <returns>n'th parameter</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projection.GetParameter(System.String)">
            <summary>
            Gets an named parameter of the projection.
            </summary>
            <remarks>The parameter name is case insensitive</remarks>
            <param name="name">Name of parameter</param>
            <returns>parameter or null if not found</returns>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Projection.ClassName">
            <summary>
            Gets the projection classification name (e.g. "Transverse_Mercator").
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Projection.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Projection.XML">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projection.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Projections.AlbersProjection">
            <summary>
            	Implements the Albers projection.
            </summary>
            <remarks>
            	<para>Implements the Albers projection. The Albers projection is most commonly
            	used to project the United States of America. It gives the northern
            	border with Canada a curved appearance.</para>
            	
            	<para>The <a href="http://www.geog.mcgill.ca/courses/geo201/mapproj/naaeana.gif">Albers Equal Area</a>
            	projection has the property that the area bounded
            	by any pair of parallels and meridians is exactly reproduced between the 
            	image of those parallels and meridians in the projected domain, that is,
            	the projection preserves the correct area of the earth though distorts
            	direction, distance and shape somewhat.</para>
            </remarks>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.AlbersProjection.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter})">
            <summary>
            Creates an instance of an Albers projection object.
            </summary>
            <param name="parameters">List of parameters to initialize the projection.</param>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>latitude_of_false_origin</term><description>The latitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>longitude_of_false_origin</term><description>The longitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>latitude_of_1st_standard_parallel</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is nearest the pole.  Scale is true along this parallel.</description></item>
            <item><term>latitude_of_2nd_standard_parallel</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is furthest from the pole.  Scale is true along this parallel.</description></item>
            <item><term>easting_at_false_origin</term><description>The easting value assigned to the false origin.</description></item>
            <item><term>northing_at_false_origin</term><description>The northing value assigned to the false origin.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.AlbersProjection.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter},ProjNet.CoordinateSystems.Projections.AlbersProjection)">
            <summary>
            Creates an instance of an Albers projection object.
            </summary>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>latitude_of_center</term><description>The latitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>longitude_of_center</term><description>The longitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>standard_parallel_1</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is nearest the pole.  Scale is true along this parallel.</description></item>
            <item><term>standard_parallel_2</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is furthest from the pole.  Scale is true along this parallel.</description></item>
            <item><term>false_easting</term><description>The easting value assigned to the false origin.</description></item>
            <item><term>false_northing</term><description>The northing value assigned to the false origin.</description></item>
            </list>
            </remarks>
            <param name="parameters">List of parameters to initialize the projection.</param>
            <param name="inverse">Indicates whether the projection forward (meters to degrees or degrees to meters).</param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.AlbersProjection.RadiansToMeters(System.Double[])">
            <summary>
            Converts coordinates in decimal degrees to projected meters.
            </summary>
            <param name="lonlat">The point in decimal degrees.</param>
            <returns>Point in projected meters</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.AlbersProjection.MetersToRadians(System.Double[])">
            <summary>
            Converts coordinates in projected meters to decimal degrees.
            </summary>
            <param name="p">Point in meters</param>
            <returns>Transformed point in decimal degrees</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.AlbersProjection.Inverse">
            <summary>
            Returns the inverse of this projection.
            </summary>
            <returns>IMathTransform that is the reverse of the current projection.</returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Projections.KrovakProjection">
            <summary>
            Implemetns the Krovak Projection.
            </summary>
            <remarks>
            <para>The normal case of the Lambert Conformal conic is for the axis of the cone 
            to be coincident with the minor axis of the ellipsoid, that is the axis of the cone 
            is normal to the ellipsoid at a pole. For the Oblique Conformal Conic the axis 
            of the cone is normal to the ellipsoid at a defined location and its extension 
            cuts the minor axis at a defined angle. This projection is used in the Czech Republic 
            and Slovakia under the name "Krovak" projection.</para>
            </remarks>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.KrovakProjection.MaximumIterations">
            Maximum number of iterations for iterative computations.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.KrovakProjection.IterationTolerance">
            When to stop the iteration.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.KrovakProjection._azimuth">
            Azimuth of the centre line passing through the centre of the projection.
            This is equals to the co-latitude of the cone axis at point of intersection
            with the ellipsoid.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.KrovakProjection._pseudoStandardParallel">
            Latitude of pseudo standard parallel.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.KrovakProjection._sinAzim">
            Useful variables calculated from parameters defined by user.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.KrovakProjection._cosAzim">
            Useful variables calculated from parameters defined by user.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.KrovakProjection._n">
            Useful variables calculated from parameters defined by user.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.KrovakProjection._tanS2">
            Useful variables calculated from parameters defined by user.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.KrovakProjection._alfa">
            Useful variables calculated from parameters defined by user.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.KrovakProjection._hae">
            Useful variables calculated from parameters defined by user.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.KrovakProjection._k1">
            Useful variables calculated from parameters defined by user.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.KrovakProjection._ka">
            Useful variables calculated from parameters defined by user.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.KrovakProjection._ro0">
            Useful variables calculated from parameters defined by user.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.KrovakProjection._rop">
            Useful variables calculated from parameters defined by user.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.KrovakProjection.S45">
            Useful constant - 45° in radians.
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.KrovakProjection.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter})">
            <summary>
            Creates an instance of an LambertConformalConic2SPProjection projection object.
            </summary>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>latitude_of_false_origin</term><description>The latitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>longitude_of_false_origin</term><description>The longitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>latitude_of_1st_standard_parallel</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is nearest the pole.  Scale is true along this parallel.</description></item>
            <item><term>latitude_of_2nd_standard_parallel</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is furthest from the pole.  Scale is true along this parallel.</description></item>
            <item><term>easting_at_false_origin</term><description>The easting value assigned to the false origin.</description></item>
            <item><term>northing_at_false_origin</term><description>The northing value assigned to the false origin.</description></item>
            </list>
            </remarks>
            <param name="parameters">List of parameters to initialize the projection.</param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.KrovakProjection.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter},ProjNet.CoordinateSystems.Projections.KrovakProjection)">
            <summary>
            Creates an instance of an Albers projection object.
            </summary>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Parameter</term><description>Description</description></listheader>
            <item><term>latitude_of_origin</term><description>The latitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>central_meridian</term><description>The longitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>standard_parallel_1</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is nearest the pole.  Scale is true along this parallel.</description></item>
            <item><term>standard_parallel_2</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is furthest from the pole.  Scale is true along this parallel.</description></item>
            <item><term>false_easting</term><description>The easting value assigned to the false origin.</description></item>
            <item><term>false_northing</term><description>The northing value assigned to the false origin.</description></item>
            </list>
            </remarks>
            <param name="parameters">List of parameters to initialize the projection.</param>
            <param name="inverse">Indicates whether the projection forward (meters to degrees or degrees to meters).</param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.KrovakProjection.RadiansToMeters(System.Double[])">
            <summary>
            Converts coordinates in decimal degrees to projected meters.
            </summary>
            <param name="lonlat">The point in decimal degrees.</param>
            <returns>Point in projected meters</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.KrovakProjection.MetersToRadians(System.Double[])">
            <summary>
            Converts coordinates in projected meters to decimal degrees.
            </summary>
            <param name="p">Point in meters</param>
            <returns>Transformed point in decimal degrees</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.KrovakProjection.Inverse">
            <summary>
            Returns the inverse of this projection.
            </summary>
            <returns>IMathTransform that is the reverse of the current projection.</returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Projections.LambertConformalConic2SP">
            <summary>
            Implemetns the Lambert Conformal Conic 2SP Projection.
            </summary>
            <remarks>
            <para>The Lambert Conformal Conic projection is a standard projection for presenting maps
            of land areas whose East-West extent is large compared with their North-South extent.
            This projection is "conformal" in the sense that lines of latitude and longitude, 
            which are perpendicular to one another on the earth's surface, are also perpendicular
            to one another in the projected domain.</para>
            </remarks>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.LambertConformalConic2SP.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter})">
            <summary>
            Creates an instance of an LambertConformalConic2SPProjection projection object.
            </summary>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>latitude_of_false_origin</term><description>The latitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>longitude_of_false_origin</term><description>The longitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>latitude_of_1st_standard_parallel</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is nearest the pole.  Scale is true along this parallel.</description></item>
            <item><term>latitude_of_2nd_standard_parallel</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is furthest from the pole.  Scale is true along this parallel.</description></item>
            <item><term>easting_at_false_origin</term><description>The easting value assigned to the false origin.</description></item>
            <item><term>northing_at_false_origin</term><description>The northing value assigned to the false origin.</description></item>
            </list>
            </remarks>
            <param name="parameters">List of parameters to initialize the projection.</param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.LambertConformalConic2SP.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter},ProjNet.CoordinateSystems.Projections.LambertConformalConic2SP)">
            <summary>
            Creates an instance of an Albers projection object.
            </summary>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Parameter</term><description>Description</description></listheader>
            <item><term>latitude_of_origin</term><description>The latitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>central_meridian</term><description>The longitude of the point which is not the natural origin and at which grid coordinate values false easting and false northing are defined.</description></item>
            <item><term>standard_parallel_1</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is nearest the pole.  Scale is true along this parallel.</description></item>
            <item><term>standard_parallel_2</term><description>For a conic projection with two standard parallels, this is the latitude of intersection of the cone with the ellipsoid that is furthest from the pole.  Scale is true along this parallel.</description></item>
            <item><term>false_easting</term><description>The easting value assigned to the false origin.</description></item>
            <item><term>false_northing</term><description>The northing value assigned to the false origin.</description></item>
            </list>
            </remarks>
            <param name="parameters">List of parameters to initialize the projection.</param>
            <param name="inverse">Indicates whether the projection forward (meters to degrees or degrees to meters).</param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.LambertConformalConic2SP.RadiansToMeters(System.Double[])">
            <summary>
            Converts coordinates in decimal degrees to projected meters.
            </summary>
            <param name="lonlat">The point in decimal degrees.</param>
            <returns>Point in projected meters</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.LambertConformalConic2SP.MetersToRadians(System.Double[])">
            <summary>
            Converts coordinates in projected meters to decimal degrees.
            </summary>
            <param name="p">Point in meters</param>
            <returns>Transformed point in decimal degrees</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.LambertConformalConic2SP.Inverse">
            <summary>
            Returns the inverse of this projection.
            </summary>
            <returns>IMathTransform that is the reverse of the current projection.</returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Projections.MapProjection">
            <summary>
            Projections inherit from this abstract class to get access to useful mathematical functions.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter},ProjNet.CoordinateSystems.Projections.MapProjection)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="parameters">An enumeration of projection parameters</param>
            <param name="inverse">Indicator if this projection is inverse</param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter})">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="parameters">An enumeration of projection parameters</param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.CloneParametersList(System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter})">
            <summary>
            Returns a list of projection "cloned" projection parameters
            </summary>
            <returns></returns>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Projections.MapProjection.ClassName">
            <summary>
            Gets the projection classification name (e.g. 'Transverse_Mercator').
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.GetParameter(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.GetParameter(System.String)">
            <summary>
            Gets an named parameter of the projection.
            </summary>
            <remarks>The parameter name is case insensitive</remarks>
            <param name="name">Name of parameter</param>
            <returns>parameter or null if not found</returns>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Projections.MapProjection.NumParameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Projections.MapProjection.Abbreviation">
            <summary>
            Gets or sets the abbreviation of the object.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Projections.MapProjection.Alias">
            <summary>
            Gets or sets the alias of the object.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Projections.MapProjection.Authority">
            <summary>
            Gets or sets the authority name for this object, e.g., "EPSG",
            is this is a standard object with an authority specific
            identity code. Returns "CUSTOM" if this is a custom object.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Projections.MapProjection.AuthorityCode">
            <summary>
            Gets or sets the authority specific identification code of the object
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Projections.MapProjection.Name">
            <summary>
            Gets or sets the name of the object.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Projections.MapProjection.Remarks">
            <summary>
            Gets or sets the provider-supplied remarks for the object.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Projections.MapProjection.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Projections.MapProjection.XML">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.MetersToDegrees(System.Double[])">
            <summary>
            Function to transform from meters to degrees
            </summary>
            <param name="p">The ordinates of the point</param>
            <returns>The transformed ordinates</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.DegreesToMeters(System.Double[])">
            <summary>
            Function to transform from degrees to meters
            </summary>
            <param name="lonlat">The ordinates of the point</param>
            <returns>The transformed ordinates</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.Invert">
            <summary>
            Reverses the transformation
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Projections.MapProjection.IsInverse">
            <summary>
            Returns true if this projection is inverted.
            Most map projections define forward projection as "from geographic to projection", and backwards
            as "from projection to geographic". If this projection is inverted, this will be the other way around.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.Transform(System.Double[])">
            <summary>
            Transforms the specified cp.
            </summary>
            <param name="cp">The cp.</param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.MapProjection.PI">
            <summary>
            PI
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.MapProjection.HALF_PI">
            <summary>
            Half of PI
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.MapProjection.TWO_PI">
            <summary>
            PI * 2
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.MapProjection.EPSLN">
            <summary>
            EPSLN
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.MapProjection.S2R">
            <summary>
            S2R
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.MapProjection.MAX_VAL">
            <summary>
            MAX_VAL
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.MapProjection.prjMAXLONG">
            <summary>
            prjMAXLONG
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.MapProjection.DBLLONG">
            <summary>
            DBLLONG
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.CUBE(System.Double)">
            <summary>
            Returns the cube of a number.
            </summary>
            <param name="x"> </param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.QUAD(System.Double)">
            <summary>
            Returns the quad of a number.
            </summary>
            <param name="x"> </param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.GMAX(System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.GMIN(System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.IMOD(System.Double,System.Double)">
            <summary>
            IMOD
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.sign(System.Double)">
            <summary>
            Function to return the sign of an argument
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.adjust_lon(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.msfnz(System.Double,System.Double,System.Double)">
            <summary>
            Function to compute the constant small m which is the radius of
            a parallel of latitude, phi, divided by the semimajor axis.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.qsfnz(System.Double,System.Double)">
            <summary>
            Function to compute constant small q which is the radius of a 
            parallel of latitude, phi, divided by the semimajor axis. 
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.sincos(System.Double,System.Double@,System.Double@)">
            <summary>
            Function to calculate the sine and cosine in one call.  Some computer
            systems have implemented this function, resulting in a faster implementation
            than calling each function separately.  It is provided here for those
            computer systems which don`t implement this function
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.tsfnz(System.Double,System.Double,System.Double)">
            <summary>
            Function to compute the constant small t for use in the forward
            computations in the Lambert Conformal Conic and the Polar
            Stereographic projections.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.phi1z(System.Double,System.Double,System.Int64@)">
            <summary>
            
            
            </summary>
            <param name="eccent"></param>
            <param name="qs"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.asinz(System.Double)">
            <summary>
            Function to eliminate roundoff errors in asin
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.phi2z(System.Double,System.Double,System.Int64@)">
            <summary>
            Function to compute the latitude angle, phi2, for the inverse of the
            Lambert Conformal Conic and Polar Stereographic projections.
            </summary>
            <param name="eccent">Spheroid eccentricity</param>
            <param name="ts">Constant value t</param>
            <param name="flag">Error flag number</param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.e0fn(System.Double)">
            <summary>
            Functions to compute the constants e0, e1, e2, and e3 which are used
            in a series for calculating the distance along a meridian.  The
            input x represents the eccentricity squared.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.e1fn(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.e2fn(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.e3fn(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.e4fn(System.Double)">
            <summary>
            Function to compute the constant e4 from the input of the eccentricity
            of the spheroid, x.  This constant is used in the Polar Stereographic
            projection.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.mlfn(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function computes the value of M which is the distance along a meridian
            from the Equator to latitude phi.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.mlfn(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the meridian distance. This is the distance along the central 
            meridian from the equator to <paramref name="phi"/>. Accurate to &lt; 1e-5 meters 
            when used in conjuction with typical major axis values.
            </summary>
            <param name="phi"></param>
            <param name="sphi"></param>
            <param name="cphi"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.inv_mlfn(System.Double)">
            <summary>
            Calculates the latitude (phi) from a meridian distance.
            Determines phi to TOL (1e-11) radians, about 1e-6 seconds.
            </summary>
            <param name="arg">The meridonial distance</param>
            <returns>The latitude of the meridian distance.</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.FlatteningFactor(System.Double,System.Double)">
            <summary>
            Calculates the flattening factor, (<paramref name="equatorialRadius"/> - <paramref name="polarRadius"/>) / <paramref name="equatorialRadius"/>.
            </summary>
            <param name="equatorialRadius">The radius of the equator</param>
            <param name="polarRadius">The radius of a circle touching the poles</param>
            <returns>The flattening factor</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.EccentricySquared(System.Double,System.Double)">
            <summary>
            Calculates the square of eccentricity according to es = (2f - f^2) where f is the <see cref="M:ProjNet.CoordinateSystems.Projections.MapProjection.FlatteningFactor(System.Double,System.Double)">flattening factor</see>.
            </summary>
            <param name="equatorialRadius">The radius of the equator</param>
            <param name="polarRadius">The radius of a circle touching the poles</param>
            <returns>The square of eccentricity</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.CalcUtmZone(System.Double)">
            <summary>
            Function to calculate UTM zone number
            </summary>
            <param name="lon">The longitudinal value (in Degrees!)</param>
            <returns>The UTM zone number</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.LongitudeToRadians(System.Double,System.Boolean)">
            <summary>
            Converts a longitude value in degrees to radians.
            </summary>
            <param name="x">The value in degrees to convert to radians.</param>
            <param name="edge">If true, -180 and +180 are valid, otherwise they are considered out of range.</param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.MapProjection.LatitudeToRadians(System.Double,System.Boolean)">
            <summary>
            Converts a latitude value in degrees to radians.
            </summary>
            <param name="y">The value in degrees to to radians.</param>
            <param name="edge">If true, -90 and +90 are valid, otherwise they are considered out of range.</param>
            <returns></returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Projections.Mercator">
            <summary>
            Implements the Mercator projection.
            </summary>
            <remarks>
            <para>This map projection introduced in 1569 by Gerardus Mercator. It is often described as a cylindrical projection,
            but it must be derived mathematically. The meridians are equally spaced, parallel vertical lines, and the
            parallels of latitude are parallel, horizontal straight lines, spaced farther and farther apart as their distance
            from the Equator increases. This projection is widely used for navigation charts, because any straight line
            on a Mercator-projection map is a line of constant true bearing that enables a navigator to plot a straight-line
            course. It is less practical for world maps because the scale is distorted; areas farther away from the equator
            appear disproportionately large. On a Mercator projection, for example, the landmass of Greenland appears to be
            greater than that of the continent of South America; in actual area, Greenland is smaller than the Arabian Peninsula.
            </para>
            </remarks>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.Mercator.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter})">
            <summary>
            Initializes the MercatorProjection object with the specified parameters to project points. 
            </summary>
            <param name="parameters">ParameterList with the required parameters.</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.Mercator.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter},ProjNet.CoordinateSystems.Projections.Mercator)">
            <summary>
            Initializes the MercatorProjection object with the specified parameters.
            </summary>
            <param name="parameters">List of parameters to initialize the projection.</param>
            <param name="isInverse">Indicates whether the projection forward (meters to degrees or degrees to meters).</param>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>central_meridian</term><description>The longitude of the point from which the values of both the geographical coordinates on the ellipsoid and the grid coordinates on the projection are deemed to increment or decrement for computational purposes. Alternatively it may be considered as the longitude of the point which in the absence of application of false coordinates has grid coordinates of (0,0).</description></item>
            <item><term>latitude_of_origin</term><description>The latitude of the point from which the values of both the geographical coordinates on the ellipsoid and the grid coordinates on the projection are deemed to increment or decrement for computational purposes. Alternatively it may be considered as the latitude of the point which in the absence of application of false coordinates has grid coordinates of (0,0).</description></item>
            <item><term>scale_factor</term><description>The factor by which the map grid is reduced or enlarged during the projection process, defined by its value at the natural origin.</description></item>
            <item><term>false_easting</term><description>Since the natural origin may be at or near the centre of the projection and under normal coordinate circumstances would thus give rise to negative coordinates over parts of the mapped area, this origin is usually given false coordinates which are large enough to avoid this inconvenience. The False Easting, FE, is the easting value assigned to the abscissa (east).</description></item>
            <item><term>false_northing</term><description>Since the natural origin may be at or near the centre of the projection and under normal coordinate circumstances would thus give rise to negative coordinates over parts of the mapped area, this origin is usually given false coordinates which are large enough to avoid this inconvenience. The False Northing, FN, is the northing value assigned to the ordinate.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.Mercator.RadiansToMeters(System.Double[])">
            <summary>
            Converts coordinates in decimal degrees to projected meters.
            </summary>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>longitude_of_natural_origin</term><description>The longitude of the point from which the values of both the geographical coordinates on the ellipsoid and the grid coordinates on the projection are deemed to increment or decrement for computational purposes. Alternatively it may be considered as the longitude of the point which in the absence of application of false coordinates has grid coordinates of (0,0).  Sometimes known as ""central meridian""."</description></item>
            <item><term>latitude_of_natural_origin</term><description>The latitude of the point from which the values of both the geographical coordinates on the ellipsoid and the grid coordinates on the projection are deemed to increment or decrement for computational purposes. Alternatively it may be considered as the latitude of the point which in the absence of application of false coordinates has grid coordinates of (0,0).</description></item>
            <item><term>scale_factor_at_natural_origin</term><description>The factor by which the map grid is reduced or enlarged during the projection process, defined by its value at the natural origin.</description></item>
            <item><term>false_easting</term><description>Since the natural origin may be at or near the centre of the projection and under normal coordinate circumstances would thus give rise to negative coordinates over parts of the mapped area, this origin is usually given false coordinates which are large enough to avoid this inconvenience. The False Easting, FE, is the easting value assigned to the abscissa (east).</description></item>
            <item><term>false_northing</term><description>Since the natural origin may be at or near the centre of the projection and under normal coordinate circumstances would thus give rise to negative coordinates over parts of the mapped area, this origin is usually given false coordinates which are large enough to avoid this inconvenience. The False Northing, FN, is the northing value assigned to the ordinate .</description></item>
            </list>
            </remarks>
            <param name="lonlat">The point in decimal degrees.</param>
            <returns>Point in projected meters</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.Mercator.MetersToRadians(System.Double[])">
            <summary>
            Converts coordinates in projected meters to decimal degrees.
            </summary>
            <param name="p">Point in meters</param>
            <returns>Transformed point in decimal degrees</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.Mercator.Inverse">
            <summary>
            Returns the inverse of this projection.
            </summary>
            <returns>IMathTransform that is the reverse of the current projection.</returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Projections.ObliqueStereographicProjection">
            <summary>
            Implemetns the Oblique Stereographic Projection.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.ObliqueStereographicProjection.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter})">
            <summary>
            Initializes the ObliqueStereographicProjection object with the specified parameters.
            </summary>
            <param name="parameters">List of parameters to initialize the projection.</param>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>central_meridian</term><description>The longitude of the point from which the values of both the geographical coordinates on the ellipsoid and the grid coordinates on the projection are deemed to increment or decrement for computational purposes. Alternatively it may be considered as the longitude of the point which in the absence of application of false coordinates has grid coordinates of (0,0).</description></item>
            <item><term>latitude_of_origin</term><description>The latitude of the point from which the values of both the geographical coordinates on the ellipsoid and the grid coordinates on the projection are deemed to increment or decrement for computational purposes. Alternatively it may be considered as the latitude of the point which in the absence of application of false coordinates has grid coordinates of (0,0).</description></item>
            <item><term>scale_factor</term><description>The factor by which the map grid is reduced or enlarged during the projection process, defined by its value at the natural origin.</description></item>
            <item><term>false_easting</term><description>Since the natural origin may be at or near the centre of the projection and under normal coordinate circumstances would thus give rise to negative coordinates over parts of the mapped area, this origin is usually given false coordinates which are large enough to avoid this inconvenience. The False Easting, FE, is the easting value assigned to the abscissa (east).</description></item>
            <item><term>false_northing</term><description>Since the natural origin may be at or near the centre of the projection and under normal coordinate circumstances would thus give rise to negative coordinates over parts of the mapped area, this origin is usually given false coordinates which are large enough to avoid this inconvenience. The False Northing, FN, is the northing value assigned to the ordinate.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.ObliqueStereographicProjection.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter},ProjNet.CoordinateSystems.Projections.ObliqueStereographicProjection)">
            <summary>
            Initializes the ObliqueStereographicProjection object with the specified parameters.
            </summary>
            <param name="parameters">List of parameters to initialize the projection.</param>
            <param name="inverse">Inverse projection</param>
            <remarks>
            <para>The parameters this projection expects are listed below.</para>
            <list type="table">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>central_meridian</term><description>The longitude of the point from which the values of both the geographical coordinates on the ellipsoid and the grid coordinates on the projection are deemed to increment or decrement for computational purposes. Alternatively it may be considered as the longitude of the point which in the absence of application of false coordinates has grid coordinates of (0,0).</description></item>
            <item><term>latitude_of_origin</term><description>The latitude of the point from which the values of both the geographical coordinates on the ellipsoid and the grid coordinates on the projection are deemed to increment or decrement for computational purposes. Alternatively it may be considered as the latitude of the point which in the absence of application of false coordinates has grid coordinates of (0,0).</description></item>
            <item><term>scale_factor</term><description>The factor by which the map grid is reduced or enlarged during the projection process, defined by its value at the natural origin.</description></item>
            <item><term>false_easting</term><description>Since the natural origin may be at or near the centre of the projection and under normal coordinate circumstances would thus give rise to negative coordinates over parts of the mapped area, this origin is usually given false coordinates which are large enough to avoid this inconvenience. The False Easting, FE, is the easting value assigned to the abscissa (east).</description></item>
            <item><term>false_northing</term><description>Since the natural origin may be at or near the centre of the projection and under normal coordinate circumstances would thus give rise to negative coordinates over parts of the mapped area, this origin is usually given false coordinates which are large enough to avoid this inconvenience. The False Northing, FN, is the northing value assigned to the ordinate.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.ObliqueStereographicProjection.MetersToRadians(System.Double[])">
            <summary>
            Converts coordinates in projected meters to decimal degrees.
            </summary>
            <param name="p">Point in meters</param>
            <returns>Transformed point in decimal degrees</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.ObliqueStereographicProjection.RadiansToMeters(System.Double[])">
            <summary>
            Converts coordinates in decimal degrees to projected meters.
            </summary>
            <param name="lonlat">The point in decimal degrees.</param>
            <returns>Point in projected meters</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.ObliqueStereographicProjection.Inverse">
            <summary>
            Returns the inverse of this projection.
            </summary>
            <returns>IMathTransform that is the reverse of the current projection.</returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Projections.PolyconicProjection">
            <summary>
            
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.PolyconicProjection.Epsilon">
            <summary>
            Maximum difference allowed when comparing real numbers.
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.PolyconicProjection.MaximumIterations">
            <summary>
            Maximum number of iterations for iterative computations.
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.PolyconicProjection.IterationTolerance">
            <summary>
            Difference allowed in iterative computations.
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.PolyconicProjection._ml0">
            <summary>
             Meridian distance at the latitude of origin.
             Used for calculations for the ellipsoid.
             </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.PolyconicProjection.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter})">
            <summary>
             Constructs a new map projection from the supplied parameters.
            </summary>
             <param name="parameters">The parameter values in standard units</param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.PolyconicProjection.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter},ProjNet.CoordinateSystems.Projections.PolyconicProjection)">
            <summary>
            Constructs a new map projection from the supplied parameters.
            </summary>
            <param name="parameters">The parameter values in standard units</param>
            <param name="inverse">Defines if Projection is inverse</param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.PolyconicProjection.Inverse">
            <summary>
            Returns the inverse of this projection.
            </summary>
            <returns>IMathTransform that is the reverse of the current projection.</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.PolyconicProjection.msfn(System.Double,System.Double)">
            <summary>
             Computes function <code>f(s,c,e²) = c/sqrt(1 - s²*e²)</code> needed for the true scale
             latitude (Snyder 14-15), where <var>s</var> and <var>c</var> are the sine and cosine of
             the true scale latitude, and <var>e²</var> is the eccentricity squared.
            </summary>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Projections.ProjectionParameterSet">
            <summary>
            A set of projection parameters
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.ProjectionParameterSet.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter})">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="parameters">An enumeration of paramters</param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.ProjectionParameterSet.ToProjectionParameter">
            <summary>
            Function to create an enumeration of <see cref="T:GeoAPI.CoordinateSystems.ProjectionParameter"/>s of the content of this projection parameter set.
            </summary>
            <returns>An enumeration of <see cref="T:GeoAPI.CoordinateSystems.ProjectionParameter"/>s</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.ProjectionParameterSet.GetParameterValue(System.String,System.String[])">
            <summary>
            Function to get the value of a mandatory projection parameter
            </summary>
            <returns>The value of the parameter</returns>
            <exception cref="T:System.ArgumentException">Thrown if <param name="parameterName"> or any of <paramref name="alternateNames"/> is not defined.</param></exception>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.ProjectionParameterSet.GetOptionalParameterValue(System.String,System.Double,System.String[])">
            <summary>
            Method to check if all mandatory projection parameters are passed
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.ProjectionParameterSet.Find(System.String)">
            <summary>
            Function to find a parameter based on its name
            </summary>
            <param name="name">The name of the parameter</param>
            <returns>The parameter if present, otherwise null</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.ProjectionParameterSet.GetAtIndex(System.Int32)">
            <summary>
            Function to get the parameter at the given index
            </summary>
            <param name="index">The index</param>
            <returns>The parameter</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Projections.ProjectionsRegistry">
            <summary>
            Registry class for all known <see cref="T:ProjNet.CoordinateSystems.Projections.MapProjection"/>s.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.ProjectionsRegistry.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.ProjectionsRegistry.Register(System.String,System.Type)">
            <summary>
            Method to register a new Map
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Projections.TransverseMercator">
            <summary>
            Summary description for MathTransform.
            </summary>
            <remarks>
            <para>Universal (UTM) and Modified (MTM) Transverses Mercator projections. This
            is a cylindrical projection, in which the cylinder has been rotated 90°.
            Instead of being tangent to the equator (or to an other standard latitude),
            it is tangent to a central meridian. Deformation are more important as we
            are going futher from the central meridian. The Transverse Mercator
            projection is appropriate for region wich have a greater extent north-south
            than east-west.</para>
            
            <para>Reference: John P. Snyder (Map Projections - A Working Manual,
                       U.S. Geological Survey Professional Paper 1395, 1987)</para>
            </remarks>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.TransverseMercator.MAXIMUM_ITERATIONS">
            Maximum number of iterations for iterative computations.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.TransverseMercator.ITERATION_TOLERANCE">
            Relative iteration precision used in the {@code mlfn} method.
            This overrides the value in the {@link MapProjection} class.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.TransverseMercator.EPSILON">
            Maximum difference allowed when comparing real numbers.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.TransverseMercator.EPSILON_LATITUDE">
            Maximum difference allowed when comparing latitudes.
        </member>
        <!-- Badly formed XML comment ignored for member "F:ProjNet.CoordinateSystems.Projections.TransverseMercator._esp" -->
        <member name="F:ProjNet.CoordinateSystems.Projections.TransverseMercator._ml0">
            Meridian distance at the {@code latitudeOfOrigin}.
            Used for calculations for the ellipsoid.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.TransverseMercator.FC1">
            Contants used for the forward and inverse transform for the eliptical
            case of the Transverse Mercator.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.TransverseMercator.FC2">
            Contants used for the forward and inverse transform for the eliptical
            case of the Transverse Mercator.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.TransverseMercator.FC3">
            Contants used for the forward and inverse transform for the eliptical
            case of the Transverse Mercator.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.TransverseMercator.FC4">
            Contants used for the forward and inverse transform for the eliptical
            case of the Transverse Mercator.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.TransverseMercator.FC5">
            Contants used for the forward and inverse transform for the eliptical
            case of the Transverse Mercator.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.TransverseMercator.FC6">
            Contants used for the forward and inverse transform for the eliptical
            case of the Transverse Mercator.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.TransverseMercator.FC7">
            Contants used for the forward and inverse transform for the eliptical
            case of the Transverse Mercator.
        </member>
        <member name="F:ProjNet.CoordinateSystems.Projections.TransverseMercator.FC8">
            Contants used for the forward and inverse transform for the eliptical
            case of the Transverse Mercator.
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.TransverseMercator.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter})">
            <summary>
            Creates an instance of an TransverseMercatorProjection projection object.
            </summary>
            <param name="parameters">List of parameters to initialize the projection.</param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.TransverseMercator.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter},ProjNet.CoordinateSystems.Projections.TransverseMercator)">
            <summary>
            Creates an instance of an TransverseMercatorProjection projection object.
            </summary>
            <param name="parameters">List of parameters to initialize the projection.</param>
            <param name="inverse">Flag indicating wether is a forward/projection (false) or an inverse projection (true).</param>
            <remarks>
            <list type="bullet">
            <listheader><term>Items</term><description>Descriptions</description></listheader>
            <item><term>semi_major</term><description>Semi major radius</description></item>
            <item><term>semi_minor</term><description>Semi minor radius</description></item>
            <item><term>scale_factor</term><description></description></item>
            <item><term>central meridian</term><description></description></item>
            <item><term>latitude_origin</term><description></description></item>
            <item><term>false_easting</term><description></description></item>
            <item><term>false_northing</term><description></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.TransverseMercator.RadiansToMeters(System.Double[])">
            <summary>
            Converts coordinates in decimal degrees to projected meters.
            </summary>
            <param name="lonlat">The point in decimal degrees.</param>
            <returns>Point in projected meters</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.TransverseMercator.MetersToRadians(System.Double[])">
            <summary>
            Converts coordinates in projected meters to decimal degrees.
            </summary>
            <param name="p">Point in meters</param>
            <returns>Transformed point in decimal degrees</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Projections.TransverseMercator.Inverse">
            <summary>
            Returns the inverse of this projection.
            </summary>
            <returns>IMathTransform that is the reverse of the current projection.</returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Transformations.AffineTransform">
             <summary>
             Represents affine math transform which ttransform input coordinates to target using affine transformation matrix. Dimensionality might change.
             </summary>
            <remarks>If the transform's input dimension is M, and output dimension is N, then the matrix will have size [N+1][M+1].
            The +1 in the matrix dimensions allows the matrix to do a shift, as well as a rotation.
            The [M][j] element of the matrix will be the j'th ordinate of the moved origin.
            The [i][N] element of the matrix will be 0 for i less than M, and 1 for i equals M.</remarks>
             <seealso href="http://en.wikipedia.org/wiki/Affine_transformation"/>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Transformations.AffineTransform._inverse">
            <summary>
            Saved inverse transform
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Transformations.AffineTransform.dimSource">
            <summary>
            Dimension of source points - it's related to number of transformation matrix rows
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Transformations.AffineTransform.dimTarget">
            <summary>
            Dimension of output points - it's related to number of columns
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Transformations.AffineTransform.transformMatrix">
            <summary>
            Represents transform matrix of this affine transformation from input points to output ones using dimensionality defined within the affine transform
            Number of rows = dimTarget + 1
            Number of columns = dimSource + 1
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.AffineTransform.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates instance of 2D affine transform (source dimensionality 2, target dimensionality 2) using the specified values
            </summary>
            <param name="m00">Value for row 0, column 0 - AKA ScaleX</param>
            <param name="m01">Value for row 0, column 1 - AKA ShearX</param>
            <param name="m02">Value for row 0, column 2 - AKA Translate X</param>
            <param name="m10">Value for row 1, column 0 - AKA Shear Y</param>
            <param name="m11">Value for row 1, column 1 - AKA Scale Y</param>
            <param name="m12">Value for row 1, column 2 - AKA Translate Y</param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.AffineTransform.#ctor(System.Double[0:,0:])">
             <summary>
             Creates instance of affine transform using the specified matrix. 
             </summary>
             <remarks>If the transform's input dimension is M, and output dimension is N, then the matrix will have size [N+1][M+1].
             The +1 in the matrix dimensions allows the matrix to do a shift, as well as a rotation. The [M][j] element of the matrix will be the j'th ordinate of the moved origin. The [i][N] element of the matrix will be 0 for i less than M, and 1 for i equals M.</remarks>
            
             <param name="matrix">Matrix used to create afiine transform</param>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.AffineTransform.WKT">
            <summary>
            Gets a Well-Known text representation of this affine math transformation.
            </summary>
            <value></value>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.AffineTransform.XML">
            <summary>
            Gets an XML representation of this affine transformation.
            </summary>
            <value></value>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.AffineTransform.DimSource">
            <summary>
            Gets the dimension of input points.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.AffineTransform.DimTarget">
            <summary>
            Gets the dimension of output points.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.AffineTransform.GetParameterValues">
            <summary>
            Return affine transformation matrix as group of parameter values that maiy be used for retrieving WKT of this affine transform
            </summary>
            <returns>List of string pairs NAME VALUE</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.AffineTransform.LUPSolve(System.Double[0:,0:],System.Int32[],System.Double[])">
            <summary>
            Given L,U,P and b solve for x.
            Input the L and U matrices as a single matrix LU.
            Return the solution as a double[].
            LU will be a n+1xm+1 matrix where the first row and columns are zero.
            This is for ease of computation and consistency with Cormen et al.
            pseudocode.
            The pi array represents the permutation matrix.
            </summary>
            <seealso href="http://www.rkinteractive.com/blogs/SoftwareDevelopment/post/2013/05/14/Algorithms-In-C-Solving-A-System-Of-Linear-Equations.aspx"/>
            <param name="LU"></param>
            <param name="pi"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.AffineTransform.LUPDecomposition(System.Double[0:,0:])">
            <summary>
            Perform LUP decomposition on a matrix A.
            Return P as an array of ints and L and U are just in A, "in place".
            In order to make some of the calculations more straight forward and to 
            match Cormen's et al. pseudocode the matrix A should have its first row and first columns
            to be all 0.
            </summary>
            <seealso href="http://www.rkinteractive.com/blogs/SoftwareDevelopment/post/2013/05/07/Algorithms-In-C-LUP-Decomposition.aspx"/>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.AffineTransform.InvertMatrix(System.Double[0:,0:])">
            <summary>
            Given an nXn matrix A, solve n linear equations to find the inverse of A.
            </summary>
            <seealso href="http://www.rkinteractive.com/blogs/SoftwareDevelopment/post/2013/05/21/Algorithms-In-C-Finding-The-Inverse-Of-A-Matrix.aspx"/>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.AffineTransform.Inverse">
            <summary>
            Returns the inverse of this affine transformation.
            </summary>
            <returns>IMathTransform that is the reverse of the current affine transformation.</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.AffineTransform.Transform(System.Double[])">
            <summary>
            Transforms a coordinate point. The passed parameter point should not be modified.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.AffineTransform.Invert">
            <summary>
            Reverses the transformation
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.AffineTransform.GetMatrix">
            <summary>
            Returns this affine transform as an affine transform matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Transformations.ConcatenatedTransform">
            <summary>
            
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Transformations.ConcatenatedTransform._inverse">
            <summary>
            
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.ConcatenatedTransform.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.ConcatenatedTransform.#ctor(System.Collections.Generic.List{GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation})">
            <summary>
            
            </summary>
            <param name="transformlist"></param>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.ConcatenatedTransform.CoordinateTransformationList">
            <summary>
            
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.ConcatenatedTransform.Transform(System.Double[])">
            <summary>
            Transforms a point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.ConcatenatedTransform.TransformList(System.Collections.Generic.IList{System.Double[]})">
            <summary>
            Transforms a list point
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.ConcatenatedTransform.Inverse">
            <summary>
            Returns the inverse of this conversion.
            </summary>
            <returns>IMathTransform that is the reverse of the current conversion.</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.ConcatenatedTransform.Invert">
            <summary>
            Reverses the transformation
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.ConcatenatedTransform.WKT">
            <summary>
            Gets a Well-Known text representation of this object.
            </summary>
            <value></value>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.ConcatenatedTransform.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
            <value></value>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Transformations.CoordinateTransformation">
            <summary>
            Describes a coordinate transformation. This class only describes a 
            coordinate transformation, it does not actually perform the transform 
            operation on points. To transform points you must use a <see cref="P:ProjNet.CoordinateSystems.Transformations.CoordinateTransformation.MathTransform"/>.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.CoordinateTransformation.#ctor(GeoAPI.CoordinateSystems.ICoordinateSystem,GeoAPI.CoordinateSystems.ICoordinateSystem,GeoAPI.CoordinateSystems.Transformations.TransformType,GeoAPI.CoordinateSystems.Transformations.IMathTransform,System.String,System.String,System.Int64,System.String,System.String)">
            <summary>
            Initializes an instance of a CoordinateTransformation
            </summary>
            <param name="sourceCS">Source coordinate system</param>
            <param name="targetCS">Target coordinate system</param>
            <param name="transformType">Transformation type</param>
            <param name="mathTransform">Math transform</param>
            <param name="name">Name of transform</param>
            <param name="authority">Authority</param>
            <param name="authorityCode">Authority code</param>
            <param name="areaOfUse">Area of use</param>
            <param name="remarks">Remarks</param>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.CoordinateTransformation.AreaOfUse">
            <summary>
            Human readable description of domain in source coordinate system.
            </summary>		
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.CoordinateTransformation.Authority">
            <summary>
            Authority which defined transformation and parameter values.
            </summary>
            <remarks>
            An Authority is an organization that maintains definitions of Authority Codes. For example the European Petroleum Survey Group (EPSG) maintains a database of coordinate systems, and other spatial referencing objects, where each object has a code number ID. For example, the EPSG code for a WGS84 Lat/Lon coordinate system is ‘4326’
            </remarks>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.CoordinateTransformation.AuthorityCode">
            <summary>
            Code used by authority to identify transformation. An empty string is used for no code.
            </summary>
            <remarks>The AuthorityCode is a compact string defined by an Authority to reference a particular spatial reference object. For example, the European Survey Group (EPSG) authority uses 32 bit integers to reference coordinate systems, so all their code strings will consist of a few digits. The EPSG code for WGS84 Lat/Lon is ‘4326’.</remarks>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.CoordinateTransformation.MathTransform">
            <summary>
            Gets math transform.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.CoordinateTransformation.Name">
            <summary>
            Name of transformation.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.CoordinateTransformation.Remarks">
            <summary>
            Gets the provider-supplied remarks.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.CoordinateTransformation.SourceCS">
            <summary>
            Source coordinate system.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.CoordinateTransformation.TargetCS">
            <summary>
            Target coordinate system.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.CoordinateTransformation.TransformType">
            <summary>
            Semantic type of transform. For example, a datum transformation or a coordinate conversion.
            </summary>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Transformations.CoordinateTransformationFactory">
            <summary>
            Creates coordinate transformations.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.CoordinateTransformationFactory.CreateFromCoordinateSystems(GeoAPI.CoordinateSystems.ICoordinateSystem,GeoAPI.CoordinateSystems.ICoordinateSystem)">
            <summary>
            Creates a transformation between two coordinate systems.
            </summary>
            <remarks>
            This method will examine the coordinate systems in order to construct
            a transformation between them. This method may fail if no path between 
            the coordinate systems is found, using the normal failing behavior of 
            the DCP (e.g. throwing an exception).</remarks>
            <param name="sourceCS">Source coordinate system</param>
            <param name="targetCS">Target coordinate system</param>
            <returns></returns>		
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.CoordinateTransformationFactory.CreateGeog2Geog(GeoAPI.CoordinateSystems.IGeographicCoordinateSystem,GeoAPI.CoordinateSystems.IGeographicCoordinateSystem)">
            <summary>
            Geographic to geographic transformation
            </summary>
            <remarks>Adds a datum shift if nessesary</remarks>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.CoordinateTransformationFactory.CreateGeoc2Geoc(GeoAPI.CoordinateSystems.IGeocentricCoordinateSystem,GeoAPI.CoordinateSystems.IGeocentricCoordinateSystem)">
            <summary>
            Geocentric to Geocentric transformation
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.CoordinateTransformationFactory.Fitt2Any(GeoAPI.CoordinateSystems.IFittedCoordinateSystem,GeoAPI.CoordinateSystems.ICoordinateSystem)">
            <summary>
            Creates transformation from fitted coordinate system to the target one
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.CoordinateTransformationFactory.Any2Fitt(GeoAPI.CoordinateSystems.ICoordinateSystem,GeoAPI.CoordinateSystems.IFittedCoordinateSystem)">
            <summary>
            Creates transformation from source coordinate system to specified target system which is the fitted one
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.CoordinateTransformationFactory.CreateTransform(GeoAPI.CoordinateSystems.ICoordinateSystem,GeoAPI.CoordinateSystems.ICoordinateSystem,GeoAPI.CoordinateSystems.Transformations.TransformType,GeoAPI.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Creates an instance of CoordinateTransformation as an anonymous transformation without neither autohority nor code defined.
            </summary>
            <param name="sourceCS">Source coordinate system</param>
            <param name="targetCS">Target coordinate system</param>
            <param name="transformType">Transformation type</param>
            <param name="mathTransform">Math transform</param>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Transformations.DatumTransform">
            <summary>
            Transformation for applying 
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.DatumTransform.#ctor(GeoAPI.CoordinateSystems.Wgs84ConversionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ProjNet.CoordinateSystems.Transformations.DatumTransform"/> class.
            </summary>
            <param name="towgs84"></param>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.DatumTransform.WKT">
            <summary>
            Gets a Well-Known text representation of this object.
            </summary>
            <value></value>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.DatumTransform.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
            <value></value>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.DatumTransform.Inverse">
            <summary>
            Creates the inverse transform of this object.
            </summary>
            <returns></returns>
            <remarks>This method may fail if the transform is not one to one. However, all cartographic projections should succeed.</remarks>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.DatumTransform.Apply(System.Double[])">
            <summary>
            Transforms a coordinate point.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <seealso href="http://en.wikipedia.org/wiki/Helmert_transformation"/>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.DatumTransform.ApplyInverted(System.Double[])">
            <summary>
            For the reverse transformation, each element is multiplied by -1.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <seealso href="http://en.wikipedia.org/wiki/Helmert_transformation"/>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.DatumTransform.Transform(System.Double[])">
            <summary>
            Transforms a coordinate point. The passed parameter point should not be modified.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.DatumTransform.TransformList(System.Collections.Generic.IList{System.Double[]})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
            <param name="points"></param>
            <returns></returns>
            <remarks>
            This method is provided for efficiently transforming many points. The supplied array
            of ordinal values will contain packed ordinal values. For example, if the source
            dimension is 3, then the ordinals will be packed in this order (x0,y0,z0,x1,y1,z1 ...).
            The size of the passed array must be an integer multiple of DimSource. The returned
            ordinal values are packed in a similar way. In some DCPs. the ordinals may be
            transformed in-place, and the returned array may be the same as the passed array.
            So any client code should not attempt to reuse the passed ordinal values (although
            they can certainly reuse the passed array). If there is any problem then the server
            implementation will throw an exception. If this happens then the client should not
            make any assumptions about the state of the ordinal values.
            </remarks>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.DatumTransform.Invert">
            <summary>
            Reverses the transformation
            </summary>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Transformations.GeocentricTransform">
            <summary>
            
            </summary>
            <remarks>
            <para>Latitude, Longitude and ellipsoidal height in terms of a 3-dimensional geographic system
            may by expressed in terms of a geocentric (earth centered) Cartesian coordinate reference system
            X, Y, Z with the Z axis corresponding to the earth's rotation axis positive northwards, the X
            axis through the intersection of the prime meridian and equator, and the Y axis through
            the intersection of the equator with longitude 90 degrees east. The geographic and geocentric
            systems are based on the same geodetic datum.</para>
            <para>Geocentric coordinate reference systems are conventionally taken to be defined with the X
            axis through the intersection of the Greenwich meridian and equator. This requires that the equivalent
            geographic coordinate reference systems based on a non-Greenwich prime meridian should first be
            transformed to their Greenwich equivalent. Geocentric coordinates X, Y and Z take their units from
            the units of the ellipsoid axes (a and b). As it is conventional for X, Y and Z to be in metres,
            if the ellipsoid axis dimensions are given in another linear unit they should first be converted
            to metres.</para>
            </remarks>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Transformations.GeocentricTransform._isInverse">
            <summary>
            
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Transformations.GeocentricTransform._Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Transformations.GeocentricTransform._inverse">
            <summary>
            
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeocentricTransform.#ctor(System.Collections.Generic.List{GeoAPI.CoordinateSystems.ProjectionParameter},System.Boolean)">
            <summary>
            Initializes a geocentric projection object
            </summary>
            <param name="parameters">List of parameters to initialize the projection.</param>
            <param name="isInverse">Indicates whether the projection forward (meters to degrees or degrees to meters).</param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeocentricTransform.#ctor(System.Collections.Generic.List{GeoAPI.CoordinateSystems.ProjectionParameter})">
            <summary>
            Initializes a geocentric projection object
            </summary>
            <param name="parameters">List of parameters to initialize the projection.</param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeocentricTransform.Inverse">
            <summary>
            Returns the inverse of this conversion.
            </summary>
            <returns>IMathTransform that is the reverse of the current conversion.</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeocentricTransform.DegreesToMeters(System.Double[])">
            <summary>
            Converts coordinates in decimal degrees to projected meters.
            </summary>
            <param name="lonlat">The point in decimal degrees.</param>
            <returns>Point in projected meters</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeocentricTransform.MetersToDegrees(System.Double[])">
            <summary>
            Converts coordinates in projected meters to decimal degrees.
            </summary>
            <param name="pnt">Point in meters</param>
            <returns>Transformed point in decimal degrees</returns>		
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeocentricTransform.Transform(System.Double[])">
            <summary>
            Transforms a coordinate point. The passed parameter point should not be modified.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeocentricTransform.TransformList(System.Collections.Generic.IList{System.Double[]})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
            <param name="points"></param>
            <returns></returns>
            <remarks>
            This method is provided for efficiently transforming many points. The supplied array
            of ordinal values will contain packed ordinal values. For example, if the source
            dimension is 3, then the ordinals will be packed in this order (x0,y0,z0,x1,y1,z1 ...).
            The size of the passed array must be an integer multiple of DimSource. The returned
            ordinal values are packed in a similar way. In some DCPs. the ordinals may be
            transformed in-place, and the returned array may be the same as the passed array.
            So any client code should not attempt to reuse the passed ordinal values (although
            they can certainly reuse the passed array). If there is any problem then the server
            implementation will throw an exception. If this happens then the client should not
            make any assumptions about the state of the ordinal values.
            </remarks>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeocentricTransform.Invert">
            <summary>
            Reverses the transformation
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.GeocentricTransform.WKT">
            <summary>
            Gets a Well-Known text representation of this object.
            </summary>
            <value></value>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.GeocentricTransform.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
            <value></value>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Transformations.GeographicTransform">
            <summary>
            The GeographicTransform class is implemented on geographic transformation objects and
            implements datum transformations between geographic coordinate systems.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.GeographicTransform.SourceGCS">
            <summary>
            Gets or sets the source geographic coordinate system for the transformation.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.GeographicTransform.TargetGCS">
            <summary>
            Gets or sets the target geographic coordinate system for the transformation.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.GeographicTransform.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification. [NOT IMPLEMENTED].
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.GeographicTransform.XML">
            <summary>
            Gets an XML representation of this object [NOT IMPLEMENTED].
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeographicTransform.Inverse">
            <summary>
            Creates the inverse transform of this object.
            </summary>
            <remarks>This method may fail if the transform is not one to one. However, all cartographic projections should succeed.</remarks>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeographicTransform.Transform(System.Double[])">
            <summary>
            Transforms a coordinate point. The passed parameter point should not be modified.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeographicTransform.TransformList(System.Collections.Generic.IList{System.Double[]})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
            <remarks>
            This method is provided for efficiently transforming many points. The supplied array 
            of ordinal values will contain packed ordinal values. For example, if the source 
            dimension is 3, then the ordinals will be packed in this order (x0,y0,z0,x1,y1,z1 ...).
            The size of the passed array must be an integer multiple of DimSource. The returned 
            ordinal values are packed in a similar way. In some DCPs. the ordinals may be 
            transformed in-place, and the returned array may be the same as the passed array.
            So any client code should not attempt to reuse the passed ordinal values (although
            they can certainly reuse the passed array). If there is any problem then the server
            implementation will throw an exception. If this happens then the client should not
            make any assumptions about the state of the ordinal values.
            </remarks>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeographicTransform.Invert">
            <summary>
            Reverses the transformation
            </summary>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Transformations.MathTransform">
            <summary>
            Abstract class for creating multi-dimensional coordinate points transformations.
            </summary>
            <remarks>
            If a client application wishes to query the source and target coordinate 
            systems of a transformation, then it should keep hold of the 
            <see cref="T:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation"/> interface, and use the contained 
            math transform object whenever it wishes to perform a transform.
            </remarks>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.MathTransform.DimSource">
            <summary>
            Gets the dimension of input points.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.MathTransform.DimTarget">
            <summary>
            Gets the dimension of output points.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.MathTransform.Identity">
            <summary>
            Tests whether this transform does not move any points.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.MathTransform.WKT">
            <summary>
            Gets a Well-Known text representation of this object.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.MathTransform.XML">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.MathTransform.Derivative(System.Double[])">
            <summary>
            Gets the derivative of this transform at a point. If the transform does 
            not have a well-defined derivative at the point, then this function should 
            fail in the usual way for the DCP. The derivative is the matrix of the 
            non-translating portion of the approximate affine map at the point. The
            matrix will have dimensions corresponding to the source and target 
            coordinate systems. If the input dimension is M, and the output dimension 
            is N, then the matrix will have size [M][N]. The elements of the matrix 
            {elt[n][m] : n=0..(N-1)} form a vector in the output space which is 
            parallel to the displacement caused by a small change in the m'th ordinate 
            in the input space.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.MathTransform.GetCodomainConvexHull(System.Collections.Generic.List{System.Double})">
            <summary>
            Gets transformed convex hull.
            </summary>
            <remarks>
            <para>The supplied ordinates are interpreted as a sequence of points, which generates a convex
            hull in the source space. The returned sequence of ordinates represents a convex hull in the 
            output space. The number of output points will often be different from the number of input 
            points. Each of the input points should be inside the valid domain (this can be checked by 
            testing the points' domain flags individually). However, the convex hull of the input points
            may go outside the valid domain. The returned convex hull should contain the transformed image
            of the intersection of the source convex hull and the source domain.</para>
            <para>A convex hull is a shape in a coordinate system, where if two positions A and B are 
            inside the shape, then all positions in the straight line between A and B are also inside 
            the shape. So in 3D a cube and a sphere are both convex hulls. Other less obvious examples 
            of convex hulls are straight lines, and single points. (A single point is a convex hull, 
            because the positions A and B must both be the same - i.e. the point itself. So the straight
            line between A and B has zero length.)</para>
            <para>Some examples of shapes that are NOT convex hulls are donuts, and horseshoes.</para>
            </remarks>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.MathTransform.GetDomainFlags(System.Collections.Generic.List{System.Double})">
            <summary>
            Gets flags classifying domain points within a convex hull.
            </summary>
            <remarks>
            The supplied ordinates are interpreted as a sequence of points, which 
            generates a convex hull in the source space. Conceptually, each of the 
            (usually infinite) points inside the convex hull is then tested against
            the source domain. The flags of all these tests are then combined. In 
            practice, implementations of different transforms will use different 
            short-cuts to avoid doing an infinite number of tests.
            </remarks>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.MathTransform.Inverse">
            <summary>
            Creates the inverse transform of this object.
            </summary>
            <remarks>This method may fail if the transform is not one to one. However, all cartographic projections should succeed.</remarks>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.MathTransform.Transform(System.Double[])">
            <summary>
            Transforms a coordinate point. The passed parameter point should not be modified.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.MathTransform.TransformList(System.Collections.Generic.IList{System.Double[]})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
            <remarks>
            This method is provided for efficiently transforming many points. The supplied array 
            of ordinal values will contain packed ordinal values. For example, if the source 
            dimension is 3, then the ordinals will be packed in this order (x0,y0,z0,x1,y1,z1 ...).
            The size of the passed array must be an integer multiple of DimSource. The returned 
            ordinal values are packed in a similar way. In some DCPs. the ordinals may be 
            transformed in-place, and the returned array may be the same as the passed array.
            So any client code should not attempt to reuse the passed ordinal values (although
            they can certainly reuse the passed array). If there is any problem then the server
            implementation will throw an exception. If this happens then the client should not
            make any assumptions about the state of the ordinal values.
            </remarks>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.MathTransform.Invert">
            <summary>
            Reverses the transformation
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.MathTransform.Degrees2Radians(System.Double)">
            <summary>
            To convert degrees to radians, multiply degrees by pi/180. 
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Transformations.MathTransform.R2D">
            <summary>
            R2D
            </summary>
        </member>
        <member name="F:ProjNet.CoordinateSystems.Transformations.MathTransform.D2R">
            <summary>
            D2R
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.MathTransform.Radians2Degrees(System.Double)">
            <summary>
            
            </summary>
            <param name="rad"></param>
            <returns></returns>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Transformations.PrimeMeridianTransform">
            <summary>
            Adjusts target Prime Meridian
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.PrimeMeridianTransform.#ctor(GeoAPI.CoordinateSystems.IPrimeMeridian,GeoAPI.CoordinateSystems.IPrimeMeridian)">
            <summary>
            Creates instance prime meridian transform
            </summary>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.PrimeMeridianTransform.WKT">
            <summary>
            Gets a Well-Known text representation of this affine math transformation.
            </summary>
            <value></value>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.PrimeMeridianTransform.XML">
            <summary>
            Gets an XML representation of this affine transformation.
            </summary>
            <value></value>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.PrimeMeridianTransform.DimSource">
            <summary>
            Gets the dimension of input points.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Transformations.PrimeMeridianTransform.DimTarget">
            <summary>
            Gets the dimension of output points.
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.PrimeMeridianTransform.Inverse">
            <summary>
            Returns the inverse of this affine transformation.
            </summary>
            <returns>IMathTransform that is the reverse of the current affine transformation.</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.PrimeMeridianTransform.Transform(System.Double[])">
            <summary>
            Transforms a coordinate point. The passed parameter point should not be modified.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.PrimeMeridianTransform.Invert">
            <summary>
            Reverses the transformation
            </summary>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Unit">
            <summary>
            Class for defining units
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Unit.#ctor(System.Double,System.String,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new unit
            </summary>
            <param name="conversionFactor">Conversion factor to base unit</param>
            <param name="name">Name of unit</param>
            <param name="authority">Authority name</param>
            <param name="authorityCode">Authority-specific identification code.</param>
            <param name="alias">Alias</param>
            <param name="abbreviation">Abbreviation</param>
            <param name="remarks">Provider-supplied remarks</param>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Unit.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new unit
            </summary>
            <param name="name">Name of unit</param>
            <param name="conversionFactor">Conversion factor to base unit</param>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Unit.ConversionFactor">
            <summary>
            Gets or sets the number of units per base-unit.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Unit.WKT">
            <summary>
            Returns the Well-known text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:ProjNet.CoordinateSystems.Unit.XML">
            <summary>
            Gets an XML representation of this object [NOT IMPLEMENTED].
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Unit.EqualParams(System.Object)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </summary>
            <param name="obj"></param>
            <returns>True if equal</returns>
        </member>
        <member name="T:ProjNet.Converters.WellKnownText.CoordinateSystemWktReader">
            <summary>
            Creates an object based on the supplied Well Known Text (WKT).
            </summary>
        </member>
        <member name="M:ProjNet.Converters.WellKnownText.CoordinateSystemWktReader.Parse(System.String,System.Text.Encoding)">
            <summary>
            Reads and parses a WKT-formatted projection string.
            </summary>
            <param name="wkt">String containing WKT.</param>
            <param name="encoding">The encoding to use.</param>
            <returns>Object representation of the WKT.</returns>
            <exception cref="T:System.ArgumentException">If a token is not recognised.</exception>
        </member>
        <member name="M:ProjNet.Converters.WellKnownText.CoordinateSystemWktReader.ReadUnit(ProjNet.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns a IUnit given a piece of WKT.
            </summary>
            <param name="tokenizer">WktStreamTokenizer that has the WKT.</param>
            <returns>An object that implements the IUnit interface.</returns>
        </member>
        <member name="M:ProjNet.Converters.WellKnownText.CoordinateSystemWktReader.ReadLinearUnit(ProjNet.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns a <see cref="T:ProjNet.CoordinateSystems.LinearUnit"/> given a piece of WKT.
            </summary>
            <param name="tokenizer">WktStreamTokenizer that has the WKT.</param>
            <returns>An object that implements the IUnit interface.</returns>
        </member>
        <member name="M:ProjNet.Converters.WellKnownText.CoordinateSystemWktReader.ReadAngularUnit(ProjNet.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns a <see cref="T:ProjNet.CoordinateSystems.AngularUnit"/> given a piece of WKT.
            </summary>
            <param name="tokenizer">WktStreamTokenizer that has the WKT.</param>
            <returns>An object that implements the IUnit interface.</returns>
        </member>
        <member name="M:ProjNet.Converters.WellKnownText.CoordinateSystemWktReader.ReadAxis(ProjNet.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns a <see cref="T:GeoAPI.CoordinateSystems.AxisInfo"/> given a piece of WKT.
            </summary>
            <param name="tokenizer">WktStreamTokenizer that has the WKT.</param>
            <returns>An AxisInfo object.</returns>
        </member>
        <member name="T:ProjNet.Converters.WellKnownText.MathTransformWktReader">
            <summary>
            Creates an math transform based on the supplied Well Known Text (WKT).
            </summary>
        </member>
        <member name="M:ProjNet.Converters.WellKnownText.MathTransformWktReader.Parse(System.String,System.Text.Encoding)">
            <summary>
            Reads and parses a WKT-formatted projection string.
            </summary>
            <param name="wkt">String containing WKT.</param>
            <param name="encoding">The encoding to use.</param>
            <returns>Object representation of the WKT.</returns>
            <exception cref="T:System.ArgumentException">If a token is not recognised.</exception>
        </member>
        <member name="M:ProjNet.Converters.WellKnownText.MathTransformWktReader.ReadMathTransform(ProjNet.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Reads math transform from using current token from the specified tokenizer
            </summary>
            <param name="tokenizer"></param>
            <returns></returns>
        </member>
        <member name="T:ProjNet.Converters.WellKnownText.IO.StreamTokenizer">
            <summary>
            The StreamTokenizer class takes an input stream and parses it into "tokens", allowing the tokens to be read one at a time. The parsing process is controlled by a table and a number of flags that can be set to various states. The stream tokenizer can recognize identifiers, numbers, quoted strings, and various comment style
            </summary>
            <remarks>
            This is a crude c# implementation of Java's <a href="http://java.sun.com/products/jdk/1.2/docs/api/java/io/StreamTokenizer.html">StreamTokenizer</a> class.
            </remarks>
        </member>
        <member name="M:ProjNet.Converters.WellKnownText.IO.StreamTokenizer.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamTokenizer class.
            </summary>
            <param name="reader">A TextReader with some text to read.</param>
            <param name="ignoreWhitespace">Flag indicating whether whitespace should be ignored.</param>        
        </member>
        <member name="P:ProjNet.Converters.WellKnownText.IO.StreamTokenizer.LineNumber">
            <summary>
            The current line number of the stream being read.
            </summary>
        </member>
        <member name="P:ProjNet.Converters.WellKnownText.IO.StreamTokenizer.Column">
            <summary>
            The current column number of the stream being read.
            </summary>
        </member>
        <member name="M:ProjNet.Converters.WellKnownText.IO.StreamTokenizer.GetNumericValue">
            <summary>
            If the current token is a number, this field contains the value of that number. 
            </summary>
            <remarks>
            If the current token is a number, this field contains the value of that number. The current token is a number when the value of the ttype field is TT_NUMBER.
            </remarks>
            <exception cref="T:System.FormatException">Current token is not a number in a valid format.</exception>
        </member>
        <member name="M:ProjNet.Converters.WellKnownText.IO.StreamTokenizer.GetStringValue">
            <summary>
            If the current token is a word token, this field contains a string giving the characters of the word token. 
            </summary>
        </member>
        <member name="M:ProjNet.Converters.WellKnownText.IO.StreamTokenizer.GetTokenType">
            <summary>
            Gets the token type of the current token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProjNet.Converters.WellKnownText.IO.StreamTokenizer.NextToken(System.Boolean)">
            <summary>
            Returns the next token.
            </summary>
            <param name="ignoreWhitespace">Determines is whitespace is ignored. True if whitespace is to be ignored.</param>
            <returns>The TokenType of the next token.</returns>
        </member>
        <member name="M:ProjNet.Converters.WellKnownText.IO.StreamTokenizer.NextToken">
            <summary>
            Returns the next token.
            </summary>
            <returns>The TokenType of the next token.</returns>
        </member>
        <member name="M:ProjNet.Converters.WellKnownText.IO.StreamTokenizer.GetType(System.Char)">
            <summary>
            Determines a characters type (e.g. number, symbols, character).
            </summary>
            <param name="character">The character to determine.</param>
            <returns>The TokenType the character is.</returns>
        </member>
        <member name="M:ProjNet.Converters.WellKnownText.IO.StreamTokenizer.NextNonWhitespaceToken">
            <summary>
            Returns next token that is not whitespace.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ProjNet.Converters.WellKnownText.TokenType">
            <summary>
            Represents the type of token created by the StreamTokenizer class.
            </summary>
        </member>
        <member name="F:ProjNet.Converters.WellKnownText.TokenType.Word">
            <summary>
            Indicates that the token is a word.
            </summary>
        </member>
        <member name="F:ProjNet.Converters.WellKnownText.TokenType.Number">
            <summary>
            Indicates that the token is a number. 
            </summary>
        </member>
        <member name="F:ProjNet.Converters.WellKnownText.TokenType.Eol">
            <summary>
            Indicates that the end of line has been read. The field can only have this value if the eolIsSignificant method has been called with the argument true. 
            </summary>
        </member>
        <member name="F:ProjNet.Converters.WellKnownText.TokenType.Eof">
            <summary>
            Indicates that the end of the input stream has been reached.
            </summary>
        </member>
        <member name="F:ProjNet.Converters.WellKnownText.TokenType.Whitespace">
            <summary>
            Indictaes that the token is white space (space, tab, newline).
            </summary>
        </member>
        <member name="F:ProjNet.Converters.WellKnownText.TokenType.Symbol">
            <summary>
            Characters that are not whitespace, numbers, etc...
            </summary>
        </member>
        <member name="T:ProjNet.Converters.WellKnownText.WktStreamTokenizer">
            <summary>
            Reads a stream of Well Known Text (wkt) string and returns a stream of tokens.
            </summary>
        </member>
        <member name="M:ProjNet.Converters.WellKnownText.WktStreamTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the WktStreamTokenizer class.
            </summary>
            <remarks>The WktStreamTokenizer class ais in reading WKT streams.</remarks>
            <param name="reader">A TextReader that contains </param>
        </member>
        <member name="M:ProjNet.Converters.WellKnownText.WktStreamTokenizer.ReadToken(System.String)">
            <summary>
            Reads a token and checks it is what is expected.
            </summary>
            <param name="expectedToken">The expected token.</param>
        </member>
        <member name="M:ProjNet.Converters.WellKnownText.WktStreamTokenizer.ReadDoubleQuotedWord">
            <summary>
            Reads a string inside double quotes.
            </summary>
            <remarks>
            White space inside quotes is preserved.
            </remarks>
            <returns>The string inside the double quotes.</returns>
        </member>
        <member name="M:ProjNet.Converters.WellKnownText.WktStreamTokenizer.ReadAuthority(System.String@,System.Int64@)">
            <summary>
            Reads the authority and authority code.
            </summary>
            <param name="authority">String to place the authority in.</param>
            <param name="authorityCode">String to place the authority code in.</param>
        </member>
        <member name="T:ProjNet.CoordinateSystemServices">
            <summary>
            A coordinate system services class
            </summary>
        </member>
    </members>
</doc>
